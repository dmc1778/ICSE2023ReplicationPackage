Tool,Library,Path,Unnamed: 12,Unnamed: 13,Unnamed: 14,Unnamed: 15,Unnamed: 16,Unnamed: 17,Unnamed: 18,Unnamed: 19,Unnamed: 20,Unnamed: 21,Unnamed: 22,Unnamed: 23,Unnamed: 24,Unnamed: 25,Unnamed: 26,Unnamed: 27,Unnamed: 28,Unnamed: 29,Unnamed: 30,Unnamed: 31,Unnamed: 32,Unnamed: 33,Unnamed: 34,Unnamed: 35,Unnamed: 36,Unnamed: 37,Unnamed: 38,Unnamed: 39,Unnamed: 40,Unnamed: 41,Unnamed: 42,Unnamed: 43,Unnamed: 44,Unnamed: 45,Unnamed: 46,Unnamed: 47,Unnamed: 48
flawfinder,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:251:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n      char lineBuf[1024];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:399:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char lineBuf[1024]; // Max 1024 characters... hopefully long enough.\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 457 in approximately 0.01 seconds (67164 lines/second)\nPhysical Source Lines of Code (SLOC) = 330\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.06061 [1+] 6.06061 [2+] 6.06061 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:111:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n      char lineBuf[1024];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:256:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char lineBuf[1024]; // Max 1024 characters... hopefully long enough.\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 441 in approximately 0.01 seconds (64344 lines/second)\nPhysical Source Lines of Code (SLOC) = 311\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.43087 [1+] 6.43087 [2+] 6.43087 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:99:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n      char lineBuf[1024];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:248:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char lineBuf[1024]; // Max 1024 characters... hopefully long enough.\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 420 in approximately 0.01 seconds (64159 lines/second)\nPhysical Source Lines of Code (SLOC) = 298\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.71141 [1+] 6.71141 [2+] 6.71141 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:111:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n      char lineBuf[1024];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:256:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char lineBuf[1024]; // Max 1024 characters... hopefully long enough.\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 441 in approximately 0.01 seconds (62955 lines/second)\nPhysical Source Lines of Code (SLOC) = 311\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.43087 [1+] 6.43087 [2+] 6.43087 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:251:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n      char lineBuf[1024];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:399:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char lineBuf[1024]; // Max 1024 characters... hopefully long enough.\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 457 in approximately 0.01 seconds (65951 lines/second)\nPhysical Source Lines of Code (SLOC) = 330\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.06061 [1+] 6.06061 [2+] 6.06061 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:111:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n      char lineBuf[1024];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:256:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char lineBuf[1024]; // Max 1024 characters... hopefully long enough.\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 441 in approximately 0.01 seconds (64156 lines/second)\nPhysical Source Lines of Code (SLOC) = 311\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.43087 [1+] 6.43087 [2+] 6.43087 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:99:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n      char lineBuf[1024];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp:248:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char lineBuf[1024]; // Max 1024 characters... hopefully long enough.\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 420 in approximately 0.01 seconds (62984 lines/second)\nPhysical Source Lines of Code (SLOC) = 298\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.71141 [1+] 6.71141 [2+] 6.71141 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/core/util/backtrace.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:112:  [5] (race) readlink:\n  This accepts filename arguments; if an attacker can move those files or\n  change the link content, a race condition results. Also, it does not\n  terminate with ASCII NUL. (CWE-362, CWE-20). Reconsider approach.\n    int l = readlink(""/proc/self/exe"", ename, sizeof(ename));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:111:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char ename[1024];\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 206 in approximately 0.00 seconds (51828 lines/second)\nPhysical Source Lines of Code (SLOC) = 151\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   1\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   1\nHits/KSLOC@level+ = [0+] 13.245 [1+] 13.245 [2+] 13.245 [3+] 6.62252 [4+] 6.62252 [5+] 6.62252\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/core/util/backtrace.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:116:  [5] (race) readlink:\n  This accepts filename arguments; if an attacker can move those files or\n  change the link content, a race condition results. Also, it does not\n  terminate with ASCII NUL. (CWE-362, CWE-20). Reconsider approach.\n    int l = readlink(""/proc/self/exe"", ename, sizeof(ename));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:115:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char ename[1024];\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 210 in approximately 0.00 seconds (51440 lines/second)\nPhysical Source Lines of Code (SLOC) = 150\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   1\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   1\nHits/KSLOC@level+ = [0+] 13.3333 [1+] 13.3333 [2+] 13.3333 [3+] 6.66667 [4+] 6.66667 [5+] 6.66667\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/core/util/backtrace.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:116:  [5] (race) readlink:\n  This accepts filename arguments; if an attacker can move those files or\n  change the link content, a race condition results. Also, it does not\n  terminate with ASCII NUL. (CWE-362, CWE-20). Reconsider approach.\n    int l = readlink(""/proc/self/exe"", ename, sizeof(ename));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:115:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char ename[1024];\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 210 in approximately 0.00 seconds (52576 lines/second)\nPhysical Source Lines of Code (SLOC) = 150\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   1\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   1\nHits/KSLOC@level+ = [0+] 13.3333 [1+] 13.3333 [2+] 13.3333 [3+] 6.66667 [4+] 6.66667 [5+] 6.66667\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,src/mlpack/core/util/backtrace.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:119:  [5] (race) readlink:\n  This accepts filename arguments; if an attacker can move those files or\n  change the link content, a race condition results. Also, it does not\n  terminate with ASCII NUL. (CWE-362, CWE-20). Reconsider approach.\n    int l = readlink(""/proc/self/exe"",ename,sizeof(ename));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp:118:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char ename[1024];\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 213 in approximately 0.00 seconds (52788 lines/second)\nPhysical Source Lines of Code (SLOC) = 151\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   1\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   1\nHits/KSLOC@level+ = [0+] 13.245 [1+] 13.245 [2+] 13.245 [3+] 6.62252 [4+] 6.62252 [5+] 6.62252\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 314 in approximately 0.00 seconds (64900 lines/second)\nPhysical Source Lines of Code (SLOC) = 243\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4609 [1+] 4.11523 [2+] 4.11523 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 316 in approximately 0.00 seconds (71612 lines/second)\nPhysical Source Lines of Code (SLOC) = 245\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.3265 [1+] 4.08163 [2+] 4.08163 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 301 in approximately 0.00 seconds (69509 lines/second)\nPhysical Source Lines of Code (SLOC) = 232\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.2414 [1+] 4.31034 [2+] 4.31034 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 316 in approximately 0.00 seconds (68809 lines/second)\nPhysical Source Lines of Code (SLOC) = 245\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.3265 [1+] 4.08163 [2+] 4.08163 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 301 in approximately 0.00 seconds (65707 lines/second)\nPhysical Source Lines of Code (SLOC) = 232\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.2414 [1+] 4.31034 [2+] 4.31034 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 288 in approximately 0.00 seconds (67484 lines/second)\nPhysical Source Lines of Code (SLOC) = 221\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 18.0995 [1+] 4.52489 [2+] 4.52489 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 288 in approximately 0.00 seconds (67574 lines/second)\nPhysical Source Lines of Code (SLOC) = 221\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 18.0995 [1+] 4.52489 [2+] 4.52489 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:213:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 318 in approximately 0.00 seconds (72591 lines/second)\nPhysical Source Lines of Code (SLOC) = 247\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.1943 [1+] 4.04858 [2+] 4.04858 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:213:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 318 in approximately 0.00 seconds (69945 lines/second)\nPhysical Source Lines of Code (SLOC) = 247\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.1943 [1+] 4.04858 [2+] 4.04858 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:213:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 318 in approximately 0.00 seconds (73000 lines/second)\nPhysical Source Lines of Code (SLOC) = 247\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.1943 [1+] 4.04858 [2+] 4.04858 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:222:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 335 in approximately 0.00 seconds (68175 lines/second)\nPhysical Source Lines of Code (SLOC) = 262\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.2672 [1+] 3.81679 [2+] 3.81679 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:222:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 335 in approximately 0.00 seconds (75191 lines/second)\nPhysical Source Lines of Code (SLOC) = 262\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.2672 [1+] 3.81679 [2+] 3.81679 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_table.h:211:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n      FILE *foutput = fopen(file_name.c_str(), ""w+"");\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 316 in approximately 0.00 seconds (69516 lines/second)\nPhysical Source Lines of Code (SLOC) = 245\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.3265 [1+] 4.08163 [2+] 4.08163 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 368 in approximately 0.00 seconds (81658 lines/second)\nPhysical Source Lines of Code (SLOC) = 245\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.08163 [1+] 4.08163 [2+] 4.08163 [3+] 4.08163 [4+] 4.08163 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 368 in approximately 0.00 seconds (82224 lines/second)\nPhysical Source Lines of Code (SLOC) = 245\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.08163 [1+] 4.08163 [2+] 4.08163 [3+] 4.08163 [4+] 4.08163 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (63138 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68965 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68513 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (63230 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (85159 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67440 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (84386 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68793 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (73045 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (65681 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (63921 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (64205 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (73135 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (65112 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.01 seconds (66490 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (78923 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66694 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:24:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 252 in approximately 0.00 seconds (63428 lines/second)\nPhysical Source Lines of Code (SLOC) = 175\nHits@level = [0]   1 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   2 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.4286 [1+] 5.71429 [2+] 5.71429 [3+] 5.71429 [4+] 5.71429 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (80456 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67858 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (78751 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (64955 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (75164 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67919 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (78599 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:24:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 252 in approximately 0.00 seconds (62174 lines/second)\nPhysical Source Lines of Code (SLOC) = 175\nHits@level = [0]   1 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   2 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.4286 [1+] 5.71429 [2+] 5.71429 [3+] 5.71429 [4+] 5.71429 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (81331 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67355 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67529 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (86910 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (81528 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (69168 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (63625 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (73504 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68210 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68513 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (65034 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:24:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 252 in approximately 0.00 seconds (64331 lines/second)\nPhysical Source Lines of Code (SLOC) = 175\nHits@level = [0]   1 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   2 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.4286 [1+] 5.71429 [2+] 5.71429 [3+] 5.71429 [4+] 5.71429 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (62040 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:24:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 252 in approximately 0.00 seconds (64288 lines/second)\nPhysical Source Lines of Code (SLOC) = 175\nHits@level = [0]   1 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   2 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.4286 [1+] 5.71429 [2+] 5.71429 [3+] 5.71429 [4+] 5.71429 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (86265 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67805 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (60882 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66404 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (84694 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67964 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.01 seconds (53082 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:24:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 252 in approximately 0.00 seconds (58567 lines/second)\nPhysical Source Lines of Code (SLOC) = 175\nHits@level = [0]   1 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   2 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.4286 [1+] 5.71429 [2+] 5.71429 [3+] 5.71429 [4+] 5.71429 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68788 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (81626 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67183 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68571 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (62198 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66124 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66995 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (63823 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68893 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (83400 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (68149 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 388 in approximately 0.00 seconds (82316 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+] 3.92157 [4+] 3.92157 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (69393 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:24:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 252 in approximately 0.00 seconds (57105 lines/second)\nPhysical Source Lines of Code (SLOC) = 175\nHits@level = [0]   1 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   2 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.4286 [1+] 5.71429 [2+] 5.71429 [3+] 5.71429 [4+] 5.71429 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (63812 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66596 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 354 in approximately 0.00 seconds (82534 lines/second)\nPhysical Source Lines of Code (SLOC) = 235\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 4.25532 [1+] 4.25532 [2+] 4.25532 [3+] 4.25532 [4+] 4.25532 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66896 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66944 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67496 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (66100 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:24:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 252 in approximately 0.00 seconds (62065 lines/second)\nPhysical Source Lines of Code (SLOC) = 175\nHits@level = [0]   1 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   2 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.4286 [1+] 5.71429 [2+] 5.71429 [3+] 5.71429 [4+] 5.71429 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (63511 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (67448 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (65689 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib/trunk/contrib/dongryel/thesis_research/core/table/distributed_table.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_distributed_table.h:25:  [4] (race) access:\n  This usually indicates a security flaw. If an attacker can change anything\n  along the path between the call to access() and the file's actual use\n  (e.g., by moving files), the attacker can exploit the race condition\n  (CWE-362/CWE-367!). Set up the correct permissions (e.g., using setuid())\n  and try to open the file directly.\n    friend class boost::serialization::access;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 269 in approximately 0.00 seconds (64554 lines/second)\nPhysical Source Lines of Code (SLOC) = 186\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 5.37634 [1+] 5.37634 [2+] 5.37634 [3+] 5.37634 [4+] 5.37634 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:664:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 698 in approximately 0.01 seconds (101288 lines/second)\nPhysical Source Lines of Code (SLOC) = 490\nHits@level = [0]   9 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  11 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 22.449 [1+] 4.08163 [2+] 4.08163 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:912:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:914:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 948 in approximately 0.01 seconds (115978 lines/second)\nPhysical Source Lines of Code (SLOC) = 688\nHits@level = [0]  10 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  12 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.4419 [1+] 2.90698 [2+] 2.90698 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:608:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:610:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 644 in approximately 0.01 seconds (99765 lines/second)\nPhysical Source Lines of Code (SLOC) = 448\nHits@level = [0]   6 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.8571 [1+] 4.46429 [2+] 4.46429 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:664:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 698 in approximately 0.01 seconds (103651 lines/second)\nPhysical Source Lines of Code (SLOC) = 490\nHits@level = [0]   9 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  11 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 22.449 [1+] 4.08163 [2+] 4.08163 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:912:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:914:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 948 in approximately 0.01 seconds (115735 lines/second)\nPhysical Source Lines of Code (SLOC) = 688\nHits@level = [0]  10 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  12 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.4419 [1+] 2.90698 [2+] 2.90698 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:897:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:899:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 933 in approximately 0.01 seconds (109365 lines/second)\nPhysical Source Lines of Code (SLOC) = 676\nHits@level = [0]   9 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  11 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.2722 [1+] 2.95858 [2+] 2.95858 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:664:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 698 in approximately 0.01 seconds (102713 lines/second)\nPhysical Source Lines of Code (SLOC) = 490\nHits@level = [0]   9 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  11 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 22.449 [1+] 4.08163 [2+] 4.08163 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:607:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:609:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 643 in approximately 0.01 seconds (99805 lines/second)\nPhysical Source Lines of Code (SLOC) = 448\nHits@level = [0]   6 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.8571 [1+] 4.46429 [2+] 4.46429 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:608:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:610:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 644 in approximately 0.01 seconds (94363 lines/second)\nPhysical Source Lines of Code (SLOC) = 448\nHits@level = [0]   6 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.8571 [1+] 4.46429 [2+] 4.46429 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:607:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:609:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 643 in approximately 0.01 seconds (100013 lines/second)\nPhysical Source Lines of Code (SLOC) = 448\nHits@level = [0]   6 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 17.8571 [1+] 4.46429 [2+] 4.46429 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/niche/new_hmm/zhmm.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:897:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char string[100];    ","/media/nimashiri/DATA/vsprojects/ICSE23/vul_zhmm.h:899:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(string, ""state %d:\n"", i+1);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 933 in approximately 0.01 seconds (113517 lines/second)\nPhysical Source Lines of Code (SLOC) = 676\nHits@level = [0]   9 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  11 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.2722 [1+] 2.95858 [2+] 2.95858 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/dongryel/compression/compressed_matrix.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_compressed_matrix.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_compressed_matrix.h:84:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ptr_, tmp_buffer, buffer_size);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 125 in approximately 0.00 seconds (34883 lines/second)\nPhysical Source Lines of Code (SLOC) = 62\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.129 [1+] 16.129 [2+] 16.129 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/dongryel/compression/compressed_matrix.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_compressed_matrix.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_compressed_matrix.h:84:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ptr_, tmp_buffer, buffer_size);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 125 in approximately 0.00 seconds (34823 lines/second)\nPhysical Source Lines of Code (SLOC) = 62\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.129 [1+] 16.129 [2+] 16.129 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,mlpack,fastlib2/contrib/dongryel/compression/compressed_matrix.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_compressed_matrix.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_compressed_matrix.h:84:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ptr_, tmp_buffer, buffer_size);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 125 in approximately 0.00 seconds (31608 lines/second)\nPhysical Source Lines of Code (SLOC) = 62\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 16.129 [1+] 16.129 [2+] 16.129 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:56:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:57:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:58:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:632:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1297:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1326:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1439:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2934:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3433:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3835:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3907:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4214:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4293:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5762:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:629:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 15\nLines analyzed = 6092 in approximately 0.04 seconds (146658 lines/second)\nPhysical Source Lines of Code (SLOC) = 4368\nHits@level = [0]  26 [1]   1 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  41 [1+]  15 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 9.38645 [1+] 3.43407 [2+] 3.20513 [3+] 0.915751 [4+] 0.915751 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:57:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:58:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:59:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1144:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1173:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1286:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2743:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3225:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3592:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3664:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3977:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4056:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5619:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:405:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 15\nLines analyzed = 5957 in approximately 0.04 seconds (142852 lines/second)\nPhysical Source Lines of Code (SLOC) = 4251\nHits@level = [0]  23 [1]   1 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  38 [1+]  15 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 8.93907 [1+] 3.52858 [2+] 3.29334 [3+] 0.940955 [4+] 0.940955 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:948:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1060:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:72:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(tmp_dims, loop->dimensions, sizeof(npy_intp) * loop->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2117:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *tptr[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2216:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(buffer[i], tptr[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2222:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(tptr[i], buffer[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2282:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2534:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop->idptr, idarr->data, idarr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2568:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop_i, aar->dimensions, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2789:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2890:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2954:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->bufptr[1], loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3128:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3508:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3525:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4590:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4592:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", self->name);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:945:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 21\nLines analyzed = 4997 in approximately 0.04 seconds (135864 lines/second)\nPhysical Source Lines of Code (SLOC) = 3817\nHits@level = [0]  11 [1]   1 [2]  18 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  32 [1+]  21 [2+]  20 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 8.38355 [1+] 5.5017 [2+] 5.23972 [3+] 0.523972 [4+] 0.523972 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:58:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:59:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:60:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:629:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1232:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1346:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2387:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2747:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3150:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3221:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3533:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3613:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5571:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(newshape, PyArray_DIMS(ap1), PyArray_NDIM(ap1) * sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5875:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:626:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 15\nLines analyzed = 6176 in approximately 0.04 seconds (137443 lines/second)\nPhysical Source Lines of Code (SLOC) = 4416\nHits@level = [0]  16 [1]   1 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  31 [1+]  15 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 7.01993 [1+] 3.39674 [2+] 3.17029 [3+] 0.905797 [4+] 0.905797 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/nditer_pywrap.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_nditer_pywrap.c:36:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char readflags[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_nditer_pywrap.c:37:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char writeflags[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_nditer_pywrap.c:867:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char used_axes[NPY_MAXDIMS];\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2489 in approximately 0.02 seconds (147966 lines/second)\nPhysical Source Lines of Code (SLOC) = 2051\nHits@level = [0]   1 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.95027 [1+] 1.4627 [2+] 1.4627 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1809:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1855:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2010 in approximately 0.02 seconds (130680 lines/second)\nPhysical Source Lines of Code (SLOC) = 1413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.53857 [1+] 1.41543 [2+] 1.41543 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1809:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1855:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2010 in approximately 0.02 seconds (130834 lines/second)\nPhysical Source Lines of Code (SLOC) = 1413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.53857 [1+] 1.41543 [2+] 1.41543 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (141758 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (138273 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (138827 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (140320 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (135249 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (136038 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (139359 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (140016 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.03 seconds (125607 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/convert_datatype.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1680:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(zeroval, &zero_obj, sizeof(PyObject *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c:1726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(oneval, &one_obj, sizeof(PyObject *));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3314 in approximately 0.02 seconds (135720 lines/second)\nPhysical Source Lines of Code (SLOC) = 2413\nHits@level = [0]   3 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.07211 [1+] 0.828844 [2+] 0.828844 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:230:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:237:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 438 in approximately 0.01 seconds (77489 lines/second)\nPhysical Source Lines of Code (SLOC) = 348\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.74713 [1+] 5.74713 [2+] 5.74713 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:230:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:237:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 438 in approximately 0.01 seconds (74338 lines/second)\nPhysical Source Lines of Code (SLOC) = 348\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.74713 [1+] 5.74713 [2+] 5.74713 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1718:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1750:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2830:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1656:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3525 in approximately 0.02 seconds (146164 lines/second)\nPhysical Source Lines of Code (SLOC) = 2742\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.82349 [1+] 1.45879 [2+] 1.09409 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1746:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1778:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2858:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1680:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3553 in approximately 0.03 seconds (141977 lines/second)\nPhysical Source Lines of Code (SLOC) = 2766\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.80766 [1+] 1.44613 [2+] 1.0846 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1702:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1733:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2888:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3465:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1632:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1865:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1877:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3538:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3917 in approximately 0.03 seconds (146347 lines/second)\nPhysical Source Lines of Code (SLOC) = 3078\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92398 [1+] 2.59909 [2+] 1.29955 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1718:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1750:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2830:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1656:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3525 in approximately 0.02 seconds (143782 lines/second)\nPhysical Source Lines of Code (SLOC) = 2742\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.82349 [1+] 1.45879 [2+] 1.09409 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1746:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1778:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2858:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1680:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3553 in approximately 0.03 seconds (139965 lines/second)\nPhysical Source Lines of Code (SLOC) = 2766\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.80766 [1+] 1.44613 [2+] 1.0846 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1718:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1750:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2830:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1656:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3525 in approximately 0.02 seconds (143797 lines/second)\nPhysical Source Lines of Code (SLOC) = 2742\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.82349 [1+] 1.45879 [2+] 1.09409 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1746:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1778:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2858:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1680:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3553 in approximately 0.02 seconds (142591 lines/second)\nPhysical Source Lines of Code (SLOC) = 2766\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.80766 [1+] 1.44613 [2+] 1.0846 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arrayobject.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:561:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n        printf("" %"" NPY_INTP_FMT, fobj->dimensions[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:571:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n        printf("" %"" NPY_INTP_FMT, fobj->strides[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:269:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(new_string, PyString_AS_STRING(src_object), n_old);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:720:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(s1t, s1, size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:726:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(s2t, s2, size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:846:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(temp, original, nc);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:869:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(temp, original, nc*sizeof(npy_ucs4));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:887:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char atemp[SMALL_STRING], btemp[SMALL_STRING];          \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:1165:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(dimensions, PyArray_DIMS((PyArrayObject *)temp),",/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c:1451:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n                n_ops.equal),\n\nANALYSIS SUMMARY:\n\nHits = 10\nLines analyzed = 1810 in approximately 0.02 seconds (119869 lines/second)\nPhysical Source Lines of Code (SLOC) = 1292\nHits@level = [0]  26 [1]   1 [2]   7 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  36 [1+]  10 [2+]   9 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 27.8638 [1+] 7.73994 [2+] 6.96594 [3+] 1.54799 [4+] 1.54799 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (130492 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (139240 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (142136 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (140832 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:430:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:515:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:519:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:552:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(aligned, src->data, (size_t) nbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:654:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_BYTES(dst), PyArray_BYTES(src),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:793:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dest->data, src->data, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:872:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dest->data, src->data, PyArray_NBYTES(dest));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1343:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1346:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1447:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1457:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1947:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2168:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2380:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dest->data, src->data, PyArray_NBYTES(dest));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2414:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(idest->dataptr, isrc->dataptr, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3213:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:58:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:152:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3008:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3185:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 20\nLines analyzed = 3396 in approximately 0.02 seconds (144731 lines/second)\nPhysical Source Lines of Code (SLOC) = 2716\nHits@level = [0]   2 [1]   4 [2]  16 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  22 [1+]  20 [2+]  16 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 8.10015 [1+] 7.36377 [2+] 5.89102 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (143882 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (140996 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (142270 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (144053 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (141209 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (141239 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (140860 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (138849 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:430:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:515:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:519:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:552:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(aligned, src->data, (size_t) nbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:654:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_BYTES(dst), PyArray_BYTES(src),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:793:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dest->data, src->data, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:872:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dest->data, src->data, PyArray_NBYTES(dest));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1343:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1346:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1447:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1457:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1947:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2168:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2380:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dest->data, src->data, PyArray_NBYTES(dest));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2414:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(idest->dataptr, isrc->dataptr, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3213:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:58:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:152:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3008:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3185:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 20\nLines analyzed = 3396 in approximately 0.02 seconds (142960 lines/second)\nPhysical Source Lines of Code (SLOC) = 2716\nHits@level = [0]   2 [1]   4 [2]  16 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  22 [1+]  20 [2+]  16 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 8.10015 [1+] 7.36377 [2+] 5.89102 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1048:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1051:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1159:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1169:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2207:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2453:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:4032:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3811:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:4004:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 4215 in approximately 0.03 seconds (143398 lines/second)\nPhysical Source Lines of Code (SLOC) = 3164\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.05689 [1+] 4.42478 [2+] 3.16056 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (144589 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (141891 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (141239 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (141810 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (140504 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:285:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:382:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:390:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:898:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:901:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1004:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1014:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2015:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2293:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3528:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:70:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:167:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3304:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3500:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3787 in approximately 0.03 seconds (140417 lines/second)\nPhysical Source Lines of Code (SLOC) = 2902\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.51344 [1+] 4.82426 [2+] 3.4459 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:361:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:918:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2058:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2290:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3639:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:64:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:158:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3421:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3611:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3819 in approximately 0.03 seconds (142754 lines/second)\nPhysical Source Lines of Code (SLOC) = 2905\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.50775 [1+] 4.81928 [2+] 3.44234 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:309:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:406:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:414:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:956:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:959:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1071:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1083:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2321:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2672:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3979:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:93:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:191:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3762:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3951:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 4246 in approximately 0.03 seconds (141064 lines/second)\nPhysical Source Lines of Code (SLOC) = 3190\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.01567 [1+] 4.38871 [2+] 3.1348 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:434:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:438:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1059:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1062:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1160:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1170:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1860:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2092:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3424:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3207:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3396:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3604 in approximately 0.03 seconds (136510 lines/second)\nPhysical Source Lines of Code (SLOC) = 2811\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.69192 [1+] 4.98043 [2+] 3.55745 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:309:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:406:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:414:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:956:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:959:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1071:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1083:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2321:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2672:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3979:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:93:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:191:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3762:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3951:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 4246 in approximately 0.03 seconds (142179 lines/second)\nPhysical Source Lines of Code (SLOC) = 3190\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.01567 [1+] 4.38871 [2+] 3.1348 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1598:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1629:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2757:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3334:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1761:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1773:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 3749 in approximately 0.03 seconds (144590 lines/second)\nPhysical Source Lines of Code (SLOC) = 2941\nHits@level = [0]   1 [1]   3 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   7 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.72016 [1+] 2.38014 [2+] 1.36008 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1186:  [2] (integer) atoi:\n  Unless checked, the resulting number can exceed the expected range\n  (CWE-190). If source untrusted, check both minimum and maximum, even if the\n  input had no minus sign (large numbers can roll over into negative number;\n  consider saving to an unsigned value if that is intended).\n            elsize = atoi(type + 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1325:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)new + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1336:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(new->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1493:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1499:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1501:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 2701 in approximately 0.02 seconds (139940 lines/second)\nPhysical Source Lines of Code (SLOC) = 2215\nHits@level = [0]   1 [1]   3 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   6 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.16027 [1+] 2.7088 [2+] 1.3544 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1753:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1785:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2875:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1687:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3581 in approximately 0.02 seconds (144949 lines/second)\nPhysical Source Lines of Code (SLOC) = 2796\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.78827 [1+] 1.43062 [2+] 1.07296 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1776:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1808:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2902:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1700:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3631 in approximately 0.03 seconds (143372 lines/second)\nPhysical Source Lines of Code (SLOC) = 2856\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.7507 [1+] 1.40056 [2+] 1.05042 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1753:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1785:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2875:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1687:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3581 in approximately 0.02 seconds (143917 lines/second)\nPhysical Source Lines of Code (SLOC) = 2796\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.78827 [1+] 1.43062 [2+] 1.07296 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1208:  [2] (integer) atoi:\n  Unless checked, the resulting number can exceed the expected range\n  (CWE-190). If source untrusted, check both minimum and maximum, even if the\n  input had no minus sign (large numbers can roll over into negative number;\n  consider saving to an unsigned value if that is intended).\n            elsize = atoi(type + 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1347:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)new + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1358:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(new->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1515:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1521:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1523:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 2723 in approximately 0.02 seconds (143766 lines/second)\nPhysical Source Lines of Code (SLOC) = 2234\nHits@level = [0]   1 [1]   3 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   6 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.13339 [1+] 2.68577 [2+] 1.34288 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1753:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1785:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2875:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1687:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 3581 in approximately 0.03 seconds (142400 lines/second)\nPhysical Source Lines of Code (SLOC) = 2796\nHits@level = [0]   1 [1]   1 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   4 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.78827 [1+] 1.43062 [2+] 1.07296 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1043:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1046:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1163:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2156:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2399:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3975:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3757:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3947:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 4158 in approximately 0.03 seconds (141966 lines/second)\nPhysical Source Lines of Code (SLOC) = 3129\nHits@level = [0]   3 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  17 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.43305 [1+] 4.47427 [2+] 3.19591 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/f2py/src/fortranobject.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:108:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n  if (sprintf(p,""%s - "",def.name)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:111:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n      if (sprintf(p,""%sno docs available"",p)==0)","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:114:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n      if (sprintf(p,""%s%s"",p,def.doc)==0)","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:119:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n    if (sprintf(p,""%s'%c'-"",p,d->type)==0) {Py_DECREF(d); goto fail;}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:122:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n      if (sprintf(p,""%sarray(%"" NPY_INTP_FMT,p,def.dims.d[0])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:124:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n	if (sprintf(p,""%s,%"" NPY_INTP_FMT,p,def.dims.d[i])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:125:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n      if (sprintf(p,""%s), not allocated"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:128:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n	if (sprintf(p,""%sarray(%""NPY_INTP_FMT,p,def.dims.d[0])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:130:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n	  if (sprintf(p,""%s,%"" NPY_INTP_FMT,p,def.dims.d[i])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:131:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n	if (sprintf(p,""%s)"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:133:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n	if (sprintf(p,""%sscalar"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:137:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n  if (sprintf(p,""%s\n"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:470:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n    printf(""%3"" NPY_INTP_FMT, dims[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:652:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n    sprintf(mess,""failed to initialize intent(inout|inplace|cache) array""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:787:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n      for (i=0;i<rank;++i) fprintf(stderr,"" %"" NPY_INTP_FMT,dims[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:789:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n      for (i=0;i<arr->nd;++i) fprintf(stderr,"" %"" NPY_INTP_FMT,arr->dimensions[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:238:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n      memcpy(fp->defs[i].dims.d,dims,fp->defs[i].rank*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:248:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  (memcpy(fp->defs[i].data,arr->data,s*PyArray_ITEMSIZE(arr)))==NULL) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:523:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char mess[200];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:536:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(mess,""failed to create intent(cache|hide)|optional array""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:539:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),""%"" NPY_INTP_FMT "","",dims[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:573:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(mess,""failed to initialize intent(cache) array"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:575:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input must be in one segment"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:577:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- expected at least elsize=%d but got %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:604:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(mess,""failed to initialize intent(inout) array"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:606:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input not contiguous"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:608:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input not fortran contiguous"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:610:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- expected elsize=%d but got %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:615:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input '%c' not compatible to '%c'"",\n\nANALYSIS SUMMARY:\n\nHits = 41\nLines analyzed = 816 in approximately 0.01 seconds (70797 lines/second)\nPhysical Source Lines of Code (SLOC) = 690\nHits@level = [0]  33 [1]  12 [2]  13 [3]   0 [4]  16 [5]   0\nHits@level+ = [0+]  74 [1+]  41 [2+]  29 [3+]  16 [4+]  16 [5+]   0\nHits/KSLOC@level+ = [0+] 107.246 [1+] 59.4203 [2+] 42.029 [3+] 23.1884 [4+] 23.1884 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:106:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    size += strlen(def.doc),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:138:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n  if (strlen(p)>size) {,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:139:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    fprintf(stderr,""fortranobject.c:fortran_doc:len(p)=%zd>%d(size): too long doc string required, increase size\n"",strlen(p),size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:540:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n      sprintf(mess+strlen(mess),"")"");",
flawfinder,numpy,numpy/f2py/src/fortranobject.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:108:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n  if (sprintf(p,""%s - "",def.name)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:111:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n      if (sprintf(p,""%sno docs available"",p)==0)","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:114:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n      if (sprintf(p,""%s%s"",p,def.doc)==0)","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:119:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n    if (sprintf(p,""%s'%c'-"",p,d->type)==0) {Py_DECREF(d); goto fail;}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:122:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n      if (sprintf(p,""%sarray(%"" NPY_INTP_FMT,p,def.dims.d[0])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:124:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n	if (sprintf(p,""%s,%"" NPY_INTP_FMT,p,def.dims.d[i])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:125:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n      if (sprintf(p,""%s), not allocated"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:128:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n	if (sprintf(p,""%sarray(%""NPY_INTP_FMT,p,def.dims.d[0])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:130:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n	  if (sprintf(p,""%s,%"" NPY_INTP_FMT,p,def.dims.d[i])==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:131:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n	if (sprintf(p,""%s)"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:133:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n	if (sprintf(p,""%sscalar"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:137:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n  if (sprintf(p,""%s\n"",p)==0) goto fail;","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:470:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n    printf(""%3"" NPY_INTP_FMT, dims[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:652:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n    sprintf(mess,""failed to initialize intent(inout|inplace|cache) array""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:787:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n      for (i=0;i<rank;++i) fprintf(stderr,"" %"" NPY_INTP_FMT,dims[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:789:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n      for (i=0;i<arr->nd;++i) fprintf(stderr,"" %"" NPY_INTP_FMT,arr->dimensions[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:238:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n      memcpy(fp->defs[i].dims.d,dims,fp->defs[i].rank*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:248:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  (memcpy(fp->defs[i].data,arr->data,s*PyArray_ITEMSIZE(arr)))==NULL) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:523:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char mess[200];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:536:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(mess,""failed to create intent(cache|hide)|optional array""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:539:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),""%"" NPY_INTP_FMT "","",dims[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:573:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(mess,""failed to initialize intent(cache) array"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:575:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input must be in one segment"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:577:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- expected at least elsize=%d but got %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:604:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n      sprintf(mess,""failed to initialize intent(inout) array"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:606:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input not contiguous"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:608:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input not fortran contiguous"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:610:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- expected elsize=%d but got %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:615:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n	sprintf(mess+strlen(mess),"" -- input '%c' not compatible to '%c'"",\n\nANALYSIS SUMMARY:\n\nHits = 41\nLines analyzed = 816 in approximately 0.01 seconds (71442 lines/second)\nPhysical Source Lines of Code (SLOC) = 690\nHits@level = [0]  33 [1]  12 [2]  13 [3]   0 [4]  16 [5]   0\nHits@level+ = [0+]  74 [1+]  41 [2+]  29 [3+]  16 [4+]  16 [5+]   0\nHits/KSLOC@level+ = [0+] 107.246 [1+] 59.4203 [2+] 42.029 [3+] 23.1884 [4+] 23.1884 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:106:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    size += strlen(def.doc),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:138:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n  if (strlen(p)>size) {,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:139:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    fprintf(stderr,""fortranobject.c:fortran_doc:len(p)=%zd>%d(size): too long doc string required, increase size\n"",strlen(p),size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c:540:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n      sprintf(mess+strlen(mess),"")"");",
flawfinder,numpy,numpy/core/src/multiarray/common.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_common.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_common.c:375:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[40];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 722 in approximately 0.01 seconds (100621 lines/second)\nPhysical Source Lines of Code (SLOC) = 567\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.76367 [1+] 1.76367 [2+] 1.76367 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/item_selection.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:647:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(new_data, old_data, chunk);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1771:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        binsearch((const char *)PyArray_DATA(ap1),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1772:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                  (const char *)PyArray_DATA(ap2),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1773:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                  (char *)PyArray_DATA(ret),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1783:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        error = argbinsearch((const char *)PyArray_DATA(ap1),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1784:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (const char *)PyArray_DATA(ap2),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1785:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (const char *)PyArray_DATA(sorter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1786:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (char *)PyArray_DATA(ret),\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 2448 in approximately 0.02 seconds (140533 lines/second)\nPhysical Source Lines of Code (SLOC) = 1940\nHits@level = [0]   0 [1]   0 [2]   8 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   8 [2+]   8 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.12371 [1+] 4.12371 [2+] 4.12371 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2043:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *subspace_offset[2];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 2711 in approximately 0.02 seconds (129382 lines/second)\nPhysical Source Lines of Code (SLOC) = 1892\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.528541 [1+] 0.528541 [2+] 0.528541 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2043:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *subspace_offset[2];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 2711 in approximately 0.02 seconds (127545 lines/second)\nPhysical Source Lines of Code (SLOC) = 1892\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.528541 [1+] 0.528541 [2+] 0.528541 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1763:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2073:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2278 in approximately 0.02 seconds (131209 lines/second)\nPhysical Source Lines of Code (SLOC) = 1765\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.69972 [1+] 1.69972 [2+] 1.69972 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1662:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1719:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2230 in approximately 0.02 seconds (129759 lines/second)\nPhysical Source Lines of Code (SLOC) = 1724\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74014 [1+] 1.74014 [2+] 1.74014 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1662:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1719:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2230 in approximately 0.02 seconds (132603 lines/second)\nPhysical Source Lines of Code (SLOC) = 1724\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74014 [1+] 1.74014 [2+] 1.74014 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/methods.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1431:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dimensions, sizeof(intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1469:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(self->data, datastr, num);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2205 in approximately 0.02 seconds (136842 lines/second)\nPhysical Source Lines of Code (SLOC) = 1899\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.05319 [1+] 1.05319 [2+] 1.05319 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/multiarraymodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:219:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dims, ap->dimensions, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:441:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(data, mps[i]->data, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:900:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(optr, iptr, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1057:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(tmp, sw1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1058:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw1, sw2, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1059:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw2, tmp, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1904:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char c[4];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2261:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static char repr[100];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2288:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    Py_ssize_t strlen,,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2295:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                                     &cmp_str, &strlen,",/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2299:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if (strlen < 1 || strlen > 2) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2302:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if (strlen > 1) {\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 3076 in approximately 0.02 seconds (147696 lines/second)\nPhysical Source Lines of Code (SLOC) = 2519\nHits@level = [0]   0 [1]   5 [2]   8 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  13 [1+]  13 [2+]   8 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.16078 [1+] 5.16078 [2+] 3.17586 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/reduction.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_reduction.c:57:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(shape, arr_shape, ndim * sizeof(shape[0]));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_reduction.c:328:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(shape_orig, shape, ndim * sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 606 in approximately 0.01 seconds (80534 lines/second)\nPhysical Source Lines of Code (SLOC) = 368\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.43478 [1+] 5.43478 [2+] 5.43478 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5080:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5429 in approximately 0.04 seconds (143253 lines/second)\nPhysical Source Lines of Code (SLOC) = 4037\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.1377 [1+] 6.19272 [2+] 5.6973 [3+] 1.23854 [4+] 1.23854 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5080:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5429 in approximately 0.04 seconds (147270 lines/second)\nPhysical Source Lines of Code (SLOC) = 4037\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.1377 [1+] 6.19272 [2+] 5.6973 [3+] 1.23854 [4+] 1.23854 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5080:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5429 in approximately 0.04 seconds (148045 lines/second)\nPhysical Source Lines of Code (SLOC) = 4037\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.1377 [1+] 6.19272 [2+] 5.6973 [3+] 1.23854 [4+] 1.23854 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4878:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5335 in approximately 0.04 seconds (148706 lines/second)\nPhysical Source Lines of Code (SLOC) = 3981\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.3085 [1+] 6.27983 [2+] 5.77744 [3+] 1.25597 [4+] 1.25597 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4877:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5302 in approximately 0.04 seconds (144712 lines/second)\nPhysical Source Lines of Code (SLOC) = 3944\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.4239 [1+] 6.33874 [2+] 5.83164 [3+] 1.26775 [4+] 1.26775 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4862:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5198 in approximately 0.04 seconds (147111 lines/second)\nPhysical Source Lines of Code (SLOC) = 3884\nHits@level = [0]  26 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  51 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 13.1308 [1+] 6.43666 [2+] 5.92173 [3+] 1.28733 [4+] 1.28733 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4878:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5335 in approximately 0.04 seconds (142358 lines/second)\nPhysical Source Lines of Code (SLOC) = 3981\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.3085 [1+] 6.27983 [2+] 5.77744 [3+] 1.25597 [4+] 1.25597 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4877:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5302 in approximately 0.04 seconds (148535 lines/second)\nPhysical Source Lines of Code (SLOC) = 3944\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.4239 [1+] 6.33874 [2+] 5.83164 [3+] 1.26775 [4+] 1.26775 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4862:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5198 in approximately 0.04 seconds (147261 lines/second)\nPhysical Source Lines of Code (SLOC) = 3884\nHits@level = [0]  26 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  51 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 13.1308 [1+] 6.43666 [2+] 5.92173 [3+] 1.28733 [4+] 1.28733 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4878:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5335 in approximately 0.04 seconds (147400 lines/second)\nPhysical Source Lines of Code (SLOC) = 3981\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.3085 [1+] 6.27983 [2+] 5.77744 [3+] 1.25597 [4+] 1.25597 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5080:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5429 in approximately 0.04 seconds (147023 lines/second)\nPhysical Source Lines of Code (SLOC) = 4037\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.1377 [1+] 6.19272 [2+] 5.6973 [3+] 1.23854 [4+] 1.23854 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5080:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5429 in approximately 0.04 seconds (149416 lines/second)\nPhysical Source Lines of Code (SLOC) = 4037\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.1377 [1+] 6.19272 [2+] 5.6973 [3+] 1.23854 [4+] 1.23854 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5080:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5429 in approximately 0.04 seconds (146707 lines/second)\nPhysical Source Lines of Code (SLOC) = 4037\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.1377 [1+] 6.19272 [2+] 5.6973 [3+] 1.23854 [4+] 1.23854 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4878:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5335 in approximately 0.04 seconds (147931 lines/second)\nPhysical Source Lines of Code (SLOC) = 3981\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.3085 [1+] 6.27983 [2+] 5.77744 [3+] 1.25597 [4+] 1.25597 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:54:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:586:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:698:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:101:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1085:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1116:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1222:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2662:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3038:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3106:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3145:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(out_shape, PyArray_SHAPE(arr),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3501:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3521:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3561:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4725:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4727:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4878:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptr[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:496:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    _GETATTR_(equal, eq);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:583:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5335 in approximately 0.04 seconds (148836 lines/second)\nPhysical Source Lines of Code (SLOC) = 3981\nHits@level = [0]  24 [1]   2 [2]  18 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  23 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.3085 [1+] 6.27983 [2+] 5.77744 [3+] 1.25597 [4+] 1.25597 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_type_resolution.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_type_resolution.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_type_resolution.c:1459:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(n, data, sizeof(_ufunc_masker_data));\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 2259 in approximately 0.02 seconds (128960 lines/second)\nPhysical Source Lines of Code (SLOC) = 1658\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.41255 [1+] 0.603136 [2+] 0.603136 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/item_selection.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:601:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(new_data, old_data, chunk);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 2744 in approximately 0.02 seconds (137900 lines/second)\nPhysical Source Lines of Code (SLOC) = 2247\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.445038 [1+] 0.445038 [2+] 0.445038 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/item_selection.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:601:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(new_data, old_data, chunk);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 2744 in approximately 0.02 seconds (139566 lines/second)\nPhysical Source Lines of Code (SLOC) = 2247\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.445038 [1+] 0.445038 [2+] 0.445038 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1862:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[2];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 2937 in approximately 0.02 seconds (128547 lines/second)\nPhysical Source Lines of Code (SLOC) = 1997\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.500751 [1+] 0.500751 [2+] 0.500751 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1662:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1719:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2230 in approximately 0.02 seconds (130347 lines/second)\nPhysical Source Lines of Code (SLOC) = 1724\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74014 [1+] 1.74014 [2+] 1.74014 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:92:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->maskna_strides, PyArray_MASKNA_STRIDES(self)+1,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:669:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fret->maskna_strides, maskna_strides,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2023:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2076:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2379:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 5\nLines analyzed = 2549 in approximately 0.02 seconds (126701 lines/second)\nPhysical Source Lines of Code (SLOC) = 1994\nHits@level = [0]   0 [1]   0 [2]   5 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   5 [2+]   5 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.50752 [1+] 2.50752 [2+] 2.50752 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (103887 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (105533 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (100460 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (103264 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (100671 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (102032 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (100057 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (99389 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (100382 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (105126 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (102163 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (103965 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (103789 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (105135 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (103849 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (100758 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/timsort.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p1, sizeof(@type@) * l1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(p1, p3, sizeof(@type@) * (p2 - p1));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:197:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(p3, p2, sizeof(@type@) * l2);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_timsort.c.src:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(start + 1, p3 - ofs + 1, sizeof(@type@) * ofs);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 891 in approximately 0.01 seconds (103783 lines/second)\nPhysical Source Lines of Code (SLOC) = 614\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.51466 [1+] 6.51466 [2+] 6.51466 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:197:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:390:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:397:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:835:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:855:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 991 in approximately 0.01 seconds (106737 lines/second)\nPhysical Source Lines of Code (SLOC) = 751\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 7.98935 [1+] 7.98935 [2+] 5.32623 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:196:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:383:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:390:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:398:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:798:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:816:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 947 in approximately 0.01 seconds (101002 lines/second)\nPhysical Source Lines of Code (SLOC) = 717\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 8.3682 [1+] 8.3682 [2+] 5.5788 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:207:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:411:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:418:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:426:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:954:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 1110 in approximately 0.01 seconds (111628 lines/second)\nPhysical Source Lines of Code (SLOC) = 842\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 7.12589 [1+] 7.12589 [2+] 4.75059 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:155:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:262:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:269:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:277:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:629:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = (char*)malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:649:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 679 in approximately 0.01 seconds (90577 lines/second)\nPhysical Source Lines of Code (SLOC) = 509\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 11.7878 [1+] 11.7878 [2+] 7.85855 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:207:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:411:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:418:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:426:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:954:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 1110 in approximately 0.01 seconds (105311 lines/second)\nPhysical Source Lines of Code (SLOC) = 842\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 7.12589 [1+] 7.12589 [2+] 4.75059 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:155:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:262:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:269:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:277:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:629:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = (char*)malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:649:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 679 in approximately 0.01 seconds (88956 lines/second)\nPhysical Source Lines of Code (SLOC) = 509\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 11.7878 [1+] 11.7878 [2+] 7.85855 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:207:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:411:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:418:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:426:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:954:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 1110 in approximately 0.01 seconds (111926 lines/second)\nPhysical Source Lines of Code (SLOC) = 842\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 7.12589 [1+] 7.12589 [2+] 4.75059 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/buffer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:155:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:262:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:269:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:277:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n            char buf[128];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:629:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    buf = (char*)malloc(strlen(s) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c:649:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    str = PyUString_FromStringAndSize(buf, strlen(buf));\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 679 in approximately 0.01 seconds (90644 lines/second)\nPhysical Source Lines of Code (SLOC) = 509\nHits@level = [0]   0 [1]   2 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   6 [1+]   6 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 11.7878 [1+] 11.7878 [2+] 7.85855 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:776:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                    char err_msg[174];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2242:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[2];\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 3443 in approximately 0.03 seconds (132909 lines/second)\nPhysical Source Lines of Code (SLOC) = 2291\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.872981 [1+] 0.872981 [2+] 0.872981 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3660:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3436:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3632:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3927 in approximately 0.03 seconds (141506 lines/second)\nPhysical Source Lines of Code (SLOC) = 2985\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36013 [1+] 4.69012 [2+] 3.35008 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3660:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3436:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3632:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3927 in approximately 0.03 seconds (142284 lines/second)\nPhysical Source Lines of Code (SLOC) = 2985\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36013 [1+] 4.69012 [2+] 3.35008 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3659:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3435:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3631:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3926 in approximately 0.03 seconds (140337 lines/second)\nPhysical Source Lines of Code (SLOC) = 2984\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36193 [1+] 4.69169 [2+] 3.35121 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3660:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3436:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3632:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3927 in approximately 0.03 seconds (144177 lines/second)\nPhysical Source Lines of Code (SLOC) = 2985\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36013 [1+] 4.69012 [2+] 3.35008 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3660:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3436:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3632:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3927 in approximately 0.04 seconds (110918 lines/second)\nPhysical Source Lines of Code (SLOC) = 2985\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36013 [1+] 4.69012 [2+] 3.35008 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2190:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3407:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3183:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3379:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3613 in approximately 0.03 seconds (139006 lines/second)\nPhysical Source Lines of Code (SLOC) = 2769\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.77826 [1+] 5.05598 [2+] 3.61141 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2161:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3378:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3154:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3350:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3584 in approximately 0.03 seconds (120647 lines/second)\nPhysical Source Lines of Code (SLOC) = 2753\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.81184 [1+] 5.08536 [2+] 3.6324 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2161:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3378:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3154:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3350:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3584 in approximately 0.03 seconds (139843 lines/second)\nPhysical Source Lines of Code (SLOC) = 2753\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.81184 [1+] 5.08536 [2+] 3.6324 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2190:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3407:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3183:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3379:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3613 in approximately 0.03 seconds (139117 lines/second)\nPhysical Source Lines of Code (SLOC) = 2769\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.77826 [1+] 5.05598 [2+] 3.61141 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2161:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3378:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3154:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3350:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3584 in approximately 0.03 seconds (133609 lines/second)\nPhysical Source Lines of Code (SLOC) = 2753\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.81184 [1+] 5.08536 [2+] 3.6324 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3658:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3434:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3630:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3925 in approximately 0.03 seconds (141181 lines/second)\nPhysical Source Lines of Code (SLOC) = 2984\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36193 [1+] 4.69169 [2+] 3.35121 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2161:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3378:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3154:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3350:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3584 in approximately 0.03 seconds (137744 lines/second)\nPhysical Source Lines of Code (SLOC) = 2753\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.81184 [1+] 5.08536 [2+] 3.6324 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3658:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3434:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3630:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3925 in approximately 0.03 seconds (134659 lines/second)\nPhysical Source Lines of Code (SLOC) = 2984\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36193 [1+] 4.69169 [2+] 3.35121 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2161:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3378:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3154:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3350:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3584 in approximately 0.03 seconds (135047 lines/second)\nPhysical Source Lines of Code (SLOC) = 2753\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.81184 [1+] 5.08536 [2+] 3.6324 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2161:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3378:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3154:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3350:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3584 in approximately 0.03 seconds (126850 lines/second)\nPhysical Source Lines of Code (SLOC) = 2753\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.81184 [1+] 5.08536 [2+] 3.6324 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:434:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size);                \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:519:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:523:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:556:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(aligned, src->data, (size_t) nbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:658:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_BYTES(dst), PyArray_BYTES(src),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:797:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dest->data, src->data, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:876:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dest->data, src->data, PyArray_NBYTES(dest));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1394:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1397:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1498:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(self->dimensions, dims, sizeof(intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1508:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(self->strides, strides, sizeof(intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2100:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2321:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->strides, strides, n*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2529:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dest->data, src->data, PyArray_NBYTES(dest));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2563:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(idest->dataptr, isrc->dataptr, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3374:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret->data, data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:62:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:156:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3157:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3346:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 20\nLines analyzed = 3557 in approximately 0.02 seconds (146791 lines/second)\nPhysical Source Lines of Code (SLOC) = 2851\nHits@level = [0]   2 [1]   4 [2]  16 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  22 [1+]  20 [2+]  16 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 7.71659 [1+] 7.01508 [2+] 5.61207 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3658:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3434:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3630:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3925 in approximately 0.03 seconds (139352 lines/second)\nPhysical Source Lines of Code (SLOC) = 2984\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36193 [1+] 4.69169 [2+] 3.35121 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:280:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:365:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(d1, s1, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:831:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:834:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:951:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1918:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2161:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3378:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:68:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:162:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3154:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3350:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3584 in approximately 0.03 seconds (138468 lines/second)\nPhysical Source Lines of Code (SLOC) = 2753\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.81184 [1+] 5.08536 [2+] 3.6324 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/ctors.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:307:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tout, tin, size); \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize*numitems);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:412:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(d1, s1, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:913:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdims, dims, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(newstrides, strides, nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(fa->dimensions, dims, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:1036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->strides, strides, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2076:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[40];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:2405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_STRIDES(ret), strides, n*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3658:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DATA(ret), data, num*dtype->elsize);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:92:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    s = start = malloc(strlen(sep)+3),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:189:  [1] (buffer) fgetc:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n        int c = fgetc(*fp);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3434:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    if ((sep == NULL) || (strlen(sep) == 0)) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c:3630:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    binary = ((sep == NULL) || (strlen(sep) == 0)),\n\nANALYSIS SUMMARY:\n\nHits = 14\nLines analyzed = 3925 in approximately 0.03 seconds (138921 lines/second)\nPhysical Source Lines of Code (SLOC) = 2984\nHits@level = [0]   2 [1]   4 [2]  10 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  14 [2+]  10 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 5.36193 [1+] 4.69169 [2+] 3.35121 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:55:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:56:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:57:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:612:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:111:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1289:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1318:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1422:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2464:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2962:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3339:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3411:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3718:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3797:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:5455:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr[3];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:609:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 16\nLines analyzed = 5794 in approximately 0.04 seconds (144611 lines/second)\nPhysical Source Lines of Code (SLOC) = 4143\nHits@level = [0]  24 [1]   1 [2]  11 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  40 [1+]  16 [2+]  15 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 9.65484 [1+] 3.86194 [2+] 3.62056 [3+] 0.965484 [4+] 0.965484 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1716:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1774:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:326:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:489:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:506:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:594:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:982:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1908:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, n*elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dst, src, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2481:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2570:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2980:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1 + offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2993:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2 + offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3308:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3313:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3370:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3375:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4487:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4592:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(newdata, data, sizeof(PyArray_DatetimeDTypeMetaData));\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 4928 in approximately 0.04 seconds (137010 lines/second)\nPhysical Source Lines of Code (SLOC) = 3335\nHits@level = [0]   0 [1]   0 [2]  17 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  19 [1+]  19 [2+]  19 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 5.69715 [1+] 5.69715 [2+] 5.69715 [3+] 0.5997 [4+] 0.5997 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1570:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1616:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:301:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:409:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:426:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:525:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:833:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1753:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1771:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1846:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1862:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1885:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1904:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2077:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2212:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2230:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2262:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2336:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2424:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3142:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3147:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3199:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3204:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4309:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4403:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(newdata, data, sizeof(PyArray_DatetimeDTypeMetaData));\n\nANALYSIS SUMMARY:\n\nHits = 27\nLines analyzed = 4739 in approximately 0.04 seconds (134532 lines/second)\nPhysical Source Lines of Code (SLOC) = 3216\nHits@level = [0]   0 [1]   0 [2]  25 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  27 [1+]  27 [2+]  27 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 8.39552 [1+] 8.39552 [2+] 8.39552 [3+] 0.621891 [4+] 0.621891 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1716:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1774:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:326:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:489:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:506:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:594:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:982:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1908:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, n*elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1921:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dst, src, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2481:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2570:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2980:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1 + offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2993:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2 + offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3308:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3313:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3370:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3375:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4487:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4592:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(newdata, data, sizeof(PyArray_DatetimeDTypeMetaData));\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 4928 in approximately 0.04 seconds (138224 lines/second)\nPhysical Source Lines of Code (SLOC) = 3335\nHits@level = [0]   0 [1]   0 [2]  17 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  19 [1+]  19 [2+]  19 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 5.69715 [1+] 5.69715 [2+] 5.69715 [3+] 0.5997 [4+] 0.5997 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1570:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1616:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:301:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:409:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:426:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:525:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:833:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1753:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1771:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1846:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1862:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1885:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1904:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2077:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2212:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2230:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2262:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2336:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2424:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3142:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3147:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3199:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3204:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4309:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4403:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(newdata, data, sizeof(PyArray_DatetimeDTypeMetaData));\n\nANALYSIS SUMMARY:\n\nHits = 27\nLines analyzed = 4739 in approximately 0.04 seconds (134245 lines/second)\nPhysical Source Lines of Code (SLOC) = 3216\nHits@level = [0]   0 [1]   0 [2]  25 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  27 [1+]  27 [2+]  27 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 8.39552 [1+] 8.39552 [2+] 8.39552 [3+] 0.621891 [4+] 0.621891 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1741:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2895:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1640:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1873:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1885:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3545:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3912 in approximately 0.03 seconds (138965 lines/second)\nPhysical Source Lines of Code (SLOC) = 3077\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92493 [1+] 2.59994 [2+] 1.29997 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1504:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1531:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2553:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3087:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1657:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1663:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1665:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3160:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3502 in approximately 0.02 seconds (145515 lines/second)\nPhysical Source Lines of Code (SLOC) = 2766\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.2538 [1+] 2.89226 [2+] 1.44613 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1312:  [2] (integer) atoi:\n  Unless checked, the resulting number can exceed the expected range\n  (CWE-190). If source untrusted, check both minimum and maximum, even if the\n  input had no minus sign (large numbers can roll over into negative number;\n  consider saving to an unsigned value if that is intended).\n            elsize = atoi(type + 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1462:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)new + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1473:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(new->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1631:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1637:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1639:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 2951 in approximately 0.02 seconds (149411 lines/second)\nPhysical Source Lines of Code (SLOC) = 2431\nHits@level = [0]   1 [1]   3 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   6 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.87947 [1+] 2.46812 [2+] 1.23406 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1456:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)new + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1467:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(new->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2993:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1591:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1597:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1599:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3066:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 3409 in approximately 0.02 seconds (147206 lines/second)\nPhysical Source Lines of Code (SLOC) = 2734\nHits@level = [0]   1 [1]   4 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   7 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92612 [1+] 2.56035 [2+] 1.09729 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1741:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2895:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1640:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1873:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1885:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3545:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3912 in approximately 0.03 seconds (140627 lines/second)\nPhysical Source Lines of Code (SLOC) = 3077\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92493 [1+] 2.59994 [2+] 1.29997 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1741:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2895:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1640:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1873:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1885:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3545:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3912 in approximately 0.03 seconds (145554 lines/second)\nPhysical Source Lines of Code (SLOC) = 3077\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92493 [1+] 2.59994 [2+] 1.29997 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1741:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2895:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1640:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1873:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1885:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3545:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3912 in approximately 0.03 seconds (143483 lines/second)\nPhysical Source Lines of Code (SLOC) = 3077\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92493 [1+] 2.59994 [2+] 1.29997 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1504:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1531:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2553:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3087:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1657:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1663:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1665:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3160:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3502 in approximately 0.02 seconds (146742 lines/second)\nPhysical Source Lines of Code (SLOC) = 2766\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.2538 [1+] 2.89226 [2+] 1.44613 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1312:  [2] (integer) atoi:\n  Unless checked, the resulting number can exceed the expected range\n  (CWE-190). If source untrusted, check both minimum and maximum, even if the\n  input had no minus sign (large numbers can roll over into negative number;\n  consider saving to an unsigned value if that is intended).\n            elsize = atoi(type + 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1462:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)new + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1473:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(new->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1631:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1637:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1639:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),\n\nANALYSIS SUMMARY:\n\nHits = 6\nLines analyzed = 2951 in approximately 0.02 seconds (140944 lines/second)\nPhysical Source Lines of Code (SLOC) = 2431\nHits@level = [0]   1 [1]   3 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   6 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.87947 [1+] 2.46812 [2+] 1.23406 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1741:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2895:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1640:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1873:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1885:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3545:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3912 in approximately 0.03 seconds (142961 lines/second)\nPhysical Source Lines of Code (SLOC) = 3077\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92493 [1+] 2.59994 [2+] 1.29997 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1504:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1531:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2553:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3087:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1657:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1663:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            prefix_len = strlen(""numpy."");",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1665:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3160:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3502 in approximately 0.02 seconds (141300 lines/second)\nPhysical Source Lines of Code (SLOC) = 2766\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.2538 [1+] 2.89226 [2+] 1.44613 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1741:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2895:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1640:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1873:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1885:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3545:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3912 in approximately 0.03 seconds (145251 lines/second)\nPhysical Source Lines of Code (SLOC) = 3077\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92493 [1+] 2.59994 [2+] 1.29997 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/descriptor.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1710:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((char *)newdescr + sizeof(PyObject),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1741:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(newdescr->subarray, base->subarray, sizeof(PyArray_ArrayDescr));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:2895:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy((char *) &((PyArray_DatetimeDTypeMetaData *)self->c_metadata)->meta,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char byteorder[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1640:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                        if (strncmp(type, dep_tp, strlen(dep_tp)) == 0) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1873:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            res = PyUString_FromStringAndSize(s + 1, strlen(s) - 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:1885:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        len = strlen(typeobj->tp_name),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c:3545:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            return PyUString_FromStringAndSize(s + 1, strlen(s) - 1);\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 3912 in approximately 0.03 seconds (136370 lines/second)\nPhysical Source Lines of Code (SLOC) = 3077\nHits@level = [0]   1 [1]   4 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   9 [1+]   8 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.92493 [1+] 2.59994 [2+] 1.29997 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/shape.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_shape.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_shape.c:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->maskna_strides, newmasknastrides,\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 1314 in approximately 0.01 seconds (111923 lines/second)\nPhysical Source Lines of Code (SLOC) = 961\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.04058 [1+] 1.04058 [2+] 1.04058 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/shape.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_shape.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_shape.c:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->maskna_strides, newmasknastrides,\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 1314 in approximately 0.01 seconds (116140 lines/second)\nPhysical Source Lines of Code (SLOC) = 961\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.04058 [1+] 1.04058 [2+] 1.04058 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/number.c,/media/nimashiri/DATA/vsprojects/ICSE23/vul_number.c:67:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    SET(equal),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_number.c:118:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    GET(equal),\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 864 in approximately 0.01 seconds (112462 lines/second)\nPhysical Source Lines of Code (SLOC) = 735\nHits@level = [0]   0 [1]   2 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.72109 [1+] 2.72109 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (75480 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (77749 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (77530 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (75988 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (52542 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (78930 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (52797 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (77081 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (73557 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (78045 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (78145 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (78860 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (75847 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (77694 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/npysort/quicksort.c.src,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_quicksort.c.src:370:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *stack[PYA_QS_STACK];\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 524 in approximately 0.01 seconds (78947 lines/second)\nPhysical Source Lines of Code (SLOC) = 397\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51889 [1+] 2.51889 [2+] 2.51889 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1481:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1527:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:292:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:396:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:413:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:510:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:814:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1664:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1682:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1757:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1773:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1796:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1815:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1988:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2064:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2123:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2141:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2187:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2247:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2330:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2727:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2740:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2 + offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3016:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3021:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3073:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3078:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4183:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4277:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(newdata, data, sizeof(PyArray_DatetimeDTypeMetaData));\n\nANALYSIS SUMMARY:\n\nHits = 29\nLines analyzed = 4613 in approximately 0.03 seconds (132089 lines/second)\nPhysical Source Lines of Code (SLOC) = 3117\nHits@level = [0]   0 [1]   0 [2]  27 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  29 [1+]  29 [2+]  29 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 9.30382 [1+] 9.30382 [2+] 9.30382 [3+] 0.641643 [4+] 0.641643 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1481:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1527:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:292:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:396:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:413:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:510:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, PyArray_MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:814:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1664:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1682:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1757:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1773:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1796:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1815:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1988:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2064:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2123:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2141:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2173:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2187:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2247:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2330:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2727:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2740:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2 + offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3016:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3021:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3073:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3078:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4183:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:4277:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(newdata, data, sizeof(PyArray_DatetimeDTypeMetaData));\n\nANALYSIS SUMMARY:\n\nHits = 29\nLines analyzed = 4613 in approximately 0.03 seconds (134241 lines/second)\nPhysical Source Lines of Code (SLOC) = 3117\nHits@level = [0]   0 [1]   0 [2]  27 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  29 [1+]  29 [2+]  29 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 9.30382 [1+] 9.30382 [2+] 9.30382 [3+] 0.641643 [4+] 0.641643 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:51:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT1(s, p1) {printf((s), (p1));fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:52:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT2(s, p1, p2) {printf(s, p1, p2);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:53:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define NPY_UF_DBG_PRINT3(s, p1, p2, p3) {printf(s, p1, p2, p3);fflush(stdout);}","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:571:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(ufunc->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:683:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:93:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1092:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1123:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1229:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *baseptrs[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1493:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *masks_copies[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1498:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(masks_copies, masks, (nin + nout) * sizeof(char *));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2088:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(inner_strides, NpyIter_GetInnerStrideArray(iter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2596:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2685:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *dataptrs_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3087:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3155:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3194:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3472:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3527:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                    memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3547:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *dataptr_copy[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3587:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(dataptr_copy[0], dataptr_copy[1], itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4641:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4643:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", ufunc->name);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:568:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 25\nLines analyzed = 5062 in approximately 0.03 seconds (150307 lines/second)\nPhysical Source Lines of Code (SLOC) = 3797\nHits@level = [0]  24 [1]   1 [2]  19 [3]   0 [4]   5 [5]   0\nHits@level+ = [0+]  49 [1+]  25 [2+]  24 [3+]   5 [4+]   5 [5+]   0\nHits/KSLOC@level+ = [0+] 12.9049 [1+] 6.58415 [2+] 6.32078 [3+] 1.31683 [4+] 1.31683 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (123689 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1697:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1750:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2041:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2246 in approximately 0.02 seconds (127753 lines/second)\nPhysical Source Lines of Code (SLOC) = 1747\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.71723 [1+] 1.71723 [2+] 1.71723 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1182:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1235:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1536:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1706 in approximately 0.01 seconds (123992 lines/second)\nPhysical Source Lines of Code (SLOC) = 1345\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.23048 [1+] 2.23048 [2+] 2.23048 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (125169 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1596:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1649:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1945:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2115 in approximately 0.02 seconds (130193 lines/second)\nPhysical Source Lines of Code (SLOC) = 1634\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.83599 [1+] 1.83599 [2+] 1.83599 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1155:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1208:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1509:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1681 in approximately 0.01 seconds (125422 lines/second)\nPhysical Source Lines of Code (SLOC) = 1330\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25564 [1+] 2.25564 [2+] 2.25564 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (120189 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1155:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1208:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1509:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1681 in approximately 0.01 seconds (119717 lines/second)\nPhysical Source Lines of Code (SLOC) = 1330\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25564 [1+] 2.25564 [2+] 2.25564 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (124694 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:92:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->maskna_strides, PyArray_MASKNA_STRIDES(self)+1,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:690:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fret->maskna_strides, maskna_strides,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2081:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2384:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 5\nLines analyzed = 2554 in approximately 0.02 seconds (131867 lines/second)\nPhysical Source Lines of Code (SLOC) = 1992\nHits@level = [0]   0 [1]   0 [2]   5 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   5 [2+]   5 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51004 [1+] 2.51004 [2+] 2.51004 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (123194 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1196:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1249:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1552:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1722 in approximately 0.01 seconds (124717 lines/second)\nPhysical Source Lines of Code (SLOC) = 1361\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.20426 [1+] 2.20426 [2+] 2.20426 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1677:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1730:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2021:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2226 in approximately 0.02 seconds (129954 lines/second)\nPhysical Source Lines of Code (SLOC) = 1715\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74927 [1+] 1.74927 [2+] 1.74927 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1596:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1649:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1945:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2115 in approximately 0.02 seconds (130676 lines/second)\nPhysical Source Lines of Code (SLOC) = 1634\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.83599 [1+] 1.83599 [2+] 1.83599 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1155:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1208:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1509:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1681 in approximately 0.01 seconds (124059 lines/second)\nPhysical Source Lines of Code (SLOC) = 1330\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25564 [1+] 2.25564 [2+] 2.25564 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (119697 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (124252 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1596:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1649:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1945:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2115 in approximately 0.02 seconds (130530 lines/second)\nPhysical Source Lines of Code (SLOC) = 1634\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.83599 [1+] 1.83599 [2+] 1.83599 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (121125 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (121173 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1196:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1249:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1552:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1722 in approximately 0.01 seconds (124424 lines/second)\nPhysical Source Lines of Code (SLOC) = 1361\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.20426 [1+] 2.20426 [2+] 2.20426 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (125492 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (123563 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1155:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1208:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1509:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1681 in approximately 0.01 seconds (126080 lines/second)\nPhysical Source Lines of Code (SLOC) = 1330\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25564 [1+] 2.25564 [2+] 2.25564 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (126411 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1155:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1208:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1509:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1681 in approximately 0.01 seconds (124301 lines/second)\nPhysical Source Lines of Code (SLOC) = 1330\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25564 [1+] 2.25564 [2+] 2.25564 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (125255 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (125224 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (123620 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (123368 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1677:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1730:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2021:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2226 in approximately 0.02 seconds (132212 lines/second)\nPhysical Source Lines of Code (SLOC) = 1715\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74927 [1+] 1.74927 [2+] 1.74927 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1155:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1208:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1509:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1681 in approximately 0.01 seconds (121174 lines/second)\nPhysical Source Lines of Code (SLOC) = 1330\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25564 [1+] 2.25564 [2+] 2.25564 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1596:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1649:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1945:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2115 in approximately 0.02 seconds (131177 lines/second)\nPhysical Source Lines of Code (SLOC) = 1634\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.83599 [1+] 1.83599 [2+] 1.83599 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1595:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1648:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1944:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2114 in approximately 0.02 seconds (128705 lines/second)\nPhysical Source Lines of Code (SLOC) = 1633\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.83711 [1+] 1.83711 [2+] 1.83711 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (126162 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1182:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1235:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1536:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1706 in approximately 0.01 seconds (125935 lines/second)\nPhysical Source Lines of Code (SLOC) = 1345\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.23048 [1+] 2.23048 [2+] 2.23048 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (124090 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1677:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1730:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2021:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2226 in approximately 0.02 seconds (130949 lines/second)\nPhysical Source Lines of Code (SLOC) = 1715\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74927 [1+] 1.74927 [2+] 1.74927 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1596:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1649:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1945:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2115 in approximately 0.02 seconds (132026 lines/second)\nPhysical Source Lines of Code (SLOC) = 1634\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.83599 [1+] 1.83599 [2+] 1.83599 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1155:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1208:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1509:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1681 in approximately 0.01 seconds (124323 lines/second)\nPhysical Source Lines of Code (SLOC) = 1330\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25564 [1+] 2.25564 [2+] 2.25564 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (123079 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1697:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1750:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2041:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2246 in approximately 0.02 seconds (131147 lines/second)\nPhysical Source Lines of Code (SLOC) = 1747\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.71723 [1+] 1.71723 [2+] 1.71723 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:92:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fa->maskna_strides, PyArray_MASKNA_STRIDES(self)+1,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:690:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(fret->maskna_strides, maskna_strides,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2028:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2081:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2384:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 5\nLines analyzed = 2554 in approximately 0.02 seconds (132084 lines/second)\nPhysical Source Lines of Code (SLOC) = 1992\nHits@level = [0]   0 [1]   0 [2]   5 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   5 [2+]   5 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.51004 [1+] 2.51004 [2+] 2.51004 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1196:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1249:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1552:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1722 in approximately 0.01 seconds (124298 lines/second)\nPhysical Source Lines of Code (SLOC) = 1361\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.20426 [1+] 2.20426 [2+] 2.20426 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (122636 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (124701 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1206:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord, sizeof(intp)*mit->ait->ao->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1507:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 1679 in approximately 0.01 seconds (122627 lines/second)\nPhysical Source Lines of Code (SLOC) = 1329\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.25734 [1+] 2.25734 [2+] 2.25734 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/item_selection.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:628:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(new_data, old_data, chunk);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1907:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        binsearch((const char *)PyArray_DATA(ap1),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1908:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                  (const char *)PyArray_DATA(ap2),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1909:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                  (char *)PyArray_DATA(ret),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1919:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        error = argbinsearch((const char *)PyArray_DATA(ap1),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1920:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (const char *)PyArray_DATA(ap2),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1921:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (const char *)PyArray_DATA(sorter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1922:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (char *)PyArray_DATA(ret),\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 2595 in approximately 0.02 seconds (139363 lines/second)\nPhysical Source Lines of Code (SLOC) = 2059\nHits@level = [0]   0 [1]   0 [2]   8 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   8 [2+]   8 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.88538 [1+] 3.88538 [2+] 3.88538 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/item_selection.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:628:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(new_data, old_data, chunk);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1907:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        binsearch((const char *)PyArray_DATA(ap1),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1908:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                  (const char *)PyArray_DATA(ap2),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1909:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                  (char *)PyArray_DATA(ret),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1919:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        error = argbinsearch((const char *)PyArray_DATA(ap1),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1920:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (const char *)PyArray_DATA(ap2),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1921:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (const char *)PyArray_DATA(sorter),","/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c:1922:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n                             (char *)PyArray_DATA(ret),\n\nANALYSIS SUMMARY:\n\nHits = 8\nLines analyzed = 2595 in approximately 0.02 seconds (141275 lines/second)\nPhysical Source Lines of Code (SLOC) = 2059\nHits@level = [0]   0 [1]   0 [2]   8 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   8 [2+]   8 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.88538 [1+] 3.88538 [2+] 3.88538 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/methods.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1748:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DIMS(self), dimensions, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1798:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(PyArray_DATA(self), datastr, num);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2628 in approximately 0.02 seconds (149605 lines/second)\nPhysical Source Lines of Code (SLOC) = 2228\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.897666 [1+] 0.897666 [2+] 0.897666 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/methods.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1748:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DIMS(self), dimensions, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1798:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(PyArray_DATA(self), datastr, num);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2628 in approximately 0.02 seconds (150231 lines/second)\nPhysical Source Lines of Code (SLOC) = 2228\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.897666 [1+] 0.897666 [2+] 0.897666 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/methods.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1748:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DIMS(self), dimensions, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1798:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(PyArray_DATA(self), datastr, num);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2628 in approximately 0.02 seconds (145552 lines/second)\nPhysical Source Lines of Code (SLOC) = 2228\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.897666 [1+] 0.897666 [2+] 0.897666 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/methods.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1748:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DIMS(self), dimensions, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1798:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(PyArray_DATA(self), datastr, num);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2628 in approximately 0.02 seconds (148046 lines/second)\nPhysical Source Lines of Code (SLOC) = 2228\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.897666 [1+] 0.897666 [2+] 0.897666 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/methods.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1748:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DIMS(self), dimensions, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1798:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(PyArray_DATA(self), datastr, num);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2628 in approximately 0.02 seconds (150570 lines/second)\nPhysical Source Lines of Code (SLOC) = 2228\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.897666 [1+] 0.897666 [2+] 0.897666 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/methods.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1748:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(PyArray_DIMS(self), dimensions, sizeof(npy_intp)*nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c:1798:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(PyArray_DATA(self), datastr, num);\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 2628 in approximately 0.02 seconds (150017 lines/second)\nPhysical Source Lines of Code (SLOC) = 2228\nHits@level = [0]   0 [1]   0 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   2 [1+]   2 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 0.897666 [1+] 0.897666 [2+] 0.897666 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1321:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1364:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:232:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, ap->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:301:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:381:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(ap->descr->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:398:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:492:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(ap->descr->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:753:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, NPY_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1480:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1498:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1571:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1586:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1609:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1628:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1799:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1866:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, arr->descr->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1916:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1934:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1966:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1980:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2036:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2119:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, ap->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2495:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2508:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2655:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2660:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3486:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];\n\nANALYSIS SUMMARY:\n\nHits = 27\nLines analyzed = 3817 in approximately 0.03 seconds (126547 lines/second)\nPhysical Source Lines of Code (SLOC) = 2720\nHits@level = [0]   0 [1]   0 [2]  25 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  27 [1+]  27 [2+]  27 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 9.92647 [1+] 9.92647 [2+] 9.92647 [3+] 0.735294 [4+] 0.735294 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:948:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1060:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:72:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(tmp_dims, loop->dimensions, sizeof(npy_intp) * loop->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2117:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *tptr[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2216:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(buffer[i], tptr[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2222:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(tptr[i], buffer[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2282:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2534:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop->idptr, idarr->data, idarr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2568:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop_i, aar->dimensions, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2789:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2890:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2954:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->bufptr[1], loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3128:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3508:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3525:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4590:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4592:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", self->name);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:945:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 21\nLines analyzed = 4997 in approximately 0.04 seconds (124178 lines/second)\nPhysical Source Lines of Code (SLOC) = 3817\nHits@level = [0]  11 [1]   1 [2]  18 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  32 [1+]  21 [2+]  20 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 8.38355 [1+] 5.5017 [2+] 5.23972 [3+] 0.523972 [4+] 0.523972 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:948:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1060:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:72:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(tmp_dims, loop->dimensions, sizeof(npy_intp) * loop->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2117:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *tptr[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2216:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(buffer[i], tptr[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2222:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(tptr[i], buffer[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2282:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2534:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop->idptr, idarr->data, idarr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2568:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop_i, aar->dimensions, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2789:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2890:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2954:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->bufptr[1], loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3128:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3508:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3523:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4457:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4459:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", self->name);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:945:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 21\nLines analyzed = 4864 in approximately 0.04 seconds (135632 lines/second)\nPhysical Source Lines of Code (SLOC) = 3712\nHits@level = [0]  11 [1]   1 [2]  18 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  32 [1+]  21 [2+]  20 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 8.62069 [1+] 5.65733 [2+] 5.38793 [3+] 0.538793 [4+] 0.538793 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:948:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1060:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:72:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(tmp_dims, loop->dimensions, sizeof(npy_intp) * loop->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2117:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *tptr[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2216:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(buffer[i], tptr[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2222:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(tptr[i], buffer[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2282:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2534:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop->idptr, idarr->data, idarr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2568:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop_i, aar->dimensions, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2789:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2890:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2954:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->bufptr[1], loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3128:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3508:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3525:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4590:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4592:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", self->name);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:945:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 21\nLines analyzed = 4997 in approximately 0.06 seconds (90100 lines/second)\nPhysical Source Lines of Code (SLOC) = 3817\nHits@level = [0]  11 [1]   1 [2]  18 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  32 [1+]  21 [2+]  20 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 8.38355 [1+] 5.5017 [2+] 5.23972 [3+] 0.523972 [4+] 0.523972 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/umath/ufunc_object.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:948:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->core_signature, signature);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1060:  [4] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf.\n            sprintf(buf, ""%s at position %d in \""%s\"""",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:72:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char msg[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:1097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(tmp_dims, loop->dimensions, sizeof(npy_intp) * loop->nd);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2117:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char *tptr[NPY_MAXARGS];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2216:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(buffer[i], tptr[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2222:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2276:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                        memcpy(tptr[i], buffer[i], copysizes[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2282:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                            memcpy(myptr1, myptr2, mpselsize[i]);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2534:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop->idptr, idarr->data, idarr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2568:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(loop_i, aar->dimensions, nd*sizeof(intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2789:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2890:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:2954:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->castbuf, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3097:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->bufptr[1], loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3128:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(loop->bufptr[0], loop->idptr, loop->outsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3508:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[2];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:3525:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char *data[3];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4590:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buf[100];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:4592:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n    sprintf(buf, ""<ufunc '%.50s'>"", self->name);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c:945:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    len = strlen(signature),\n\nANALYSIS SUMMARY:\n\nHits = 21\nLines analyzed = 4997 in approximately 0.04 seconds (136077 lines/second)\nPhysical Source Lines of Code (SLOC) = 3817\nHits@level = [0]  11 [1]   1 [2]  18 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  32 [1+]  21 [2+]  20 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 8.38355 [1+] 5.5017 [2+] 5.23972 [3+] 0.523972 [4+] 0.523972 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1377:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1420:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:247:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:322:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:408:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:425:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:526:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:807:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1536:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1554:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1627:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1642:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1665:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1684:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1855:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1930:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1988:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2006:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2052:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2108:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2191:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2575:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2588:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2808:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2813:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2864:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2869:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3700:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];\n\nANALYSIS SUMMARY:\n\nHits = 29\nLines analyzed = 4031 in approximately 0.03 seconds (129653 lines/second)\nPhysical Source Lines of Code (SLOC) = 2858\nHits@level = [0]   0 [1]   0 [2]  27 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  29 [1+]  29 [2+]  29 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 10.147 [1+] 10.147 [2+] 10.147 [3+] 0.69979 [4+] 0.69979 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1377:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1420:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:247:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:322:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:408:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:425:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:526:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:807:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1536:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1554:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1627:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1642:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1665:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1684:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1855:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1930:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1988:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2006:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2052:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2108:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2191:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2575:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2588:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2808:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2813:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2864:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2869:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3700:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];\n\nANALYSIS SUMMARY:\n\nHits = 29\nLines analyzed = 4031 in approximately 0.03 seconds (129093 lines/second)\nPhysical Source Lines of Code (SLOC) = 2858\nHits@level = [0]   0 [1]   0 [2]  27 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  29 [1+]  29 [2+]  29 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 10.147 [1+] 10.147 [2+] 10.147 [3+] 0.69979 [4+] 0.69979 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1377:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1420:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:247:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:322:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:408:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:425:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:526:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:807:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1536:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1554:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1627:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1642:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1665:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1684:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1855:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1930:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1988:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2006:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2052:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2108:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2191:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2575:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2588:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2808:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2813:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2864:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2869:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3700:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];\n\nANALYSIS SUMMARY:\n\nHits = 29\nLines analyzed = 4031 in approximately 0.03 seconds (129858 lines/second)\nPhysical Source Lines of Code (SLOC) = 2858\nHits@level = [0]   0 [1]   0 [2]  27 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  29 [1+]  29 [2+]  29 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 10.147 [1+] 10.147 [2+] 10.147 [3+] 0.69979 [4+] 0.69979 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1377:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1420:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:247:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:322:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:408:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:425:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:526:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(PyArray_DESCR(ap)->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:807:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, PyArray_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1536:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1554:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1627:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1642:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1665:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1684:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1855:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1930:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1988:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2006:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2038:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, PyArray_DESCR(arr)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2052:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2108:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2191:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, PyArray_DESCR(ap)->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2575:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2588:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2808:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2813:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2864:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2869:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3700:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];\n\nANALYSIS SUMMARY:\n\nHits = 29\nLines analyzed = 4031 in approximately 0.03 seconds (125916 lines/second)\nPhysical Source Lines of Code (SLOC) = 2858\nHits@level = [0]   0 [1]   0 [2]  27 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  29 [1+]  29 [2+]  29 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 10.147 [1+] 10.147 [2+] 10.147 [3+] 0.69979 [4+] 0.69979 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/arraytypes.c.src,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1570:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    return fscanf(fp, ""%""@format@, ip);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1602:  [4] (buffer) fscanf:\n  The scanf() family's %s operation, without a limit specification, permits\n  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a\n  different input function. If the scanf format is influenceable by an\n  attacker, it's exploitable.\n    num = fscanf(fp, ""%""@format@, &temp);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:220:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, &temp, ap->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:289:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(ap->descr->elsize, datalen));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:386:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ov, buffer, datalen);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:471:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ov, ptr, MIN(ap->descr->elsize,len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:753:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ip, buffer, NPY_MIN(buflen, itemsize));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1700:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1718:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1791:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1806:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1829:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n*sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:1848:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2019:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, itemsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2086:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, arr->descr->elsize * n);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2136:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2154:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(dst, src, n * itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2186:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2200:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(dst, src, itemsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2253:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(&tmp, ip, sizeof(@type@));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2336:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(buffer, ip, ap->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2687:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip1, ip1+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2700:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n                memcpy(nip2, ip2+offset, new->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2842:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:2847:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(mp, ip, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_arraytypes.c.src:3592:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\nstatic char _letter_to_num[_MAX_LETTER];\n\nANALYSIS SUMMARY:\n\nHits = 27\nLines analyzed = 3882 in approximately 0.03 seconds (126662 lines/second)\nPhysical Source Lines of Code (SLOC) = 2729\nHits@level = [0]   1 [1]   0 [2]  25 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  28 [1+]  27 [2+]  27 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 10.2602 [1+] 9.89373 [2+] 9.89373 [3+] 0.732869 [4+] 0.732869 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/multiarraymodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:230:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dims, PyArray_DIMS(ap), nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(shape, PyArray_SHAPE(arrays[0]), ndim * sizeof(shape[0]));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1243:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(tmp, sw1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1244:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw1, sw2, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1245:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw2, tmp, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2540:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char c[4];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:3046:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static char repr[100];\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 4059 in approximately 0.03 seconds (148224 lines/second)\nPhysical Source Lines of Code (SLOC) = 3226\nHits@level = [0]   0 [1]   0 [2]   7 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   7 [2+]   7 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.16987 [1+] 2.16987 [2+] 2.16987 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/multiarraymodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:230:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dims, PyArray_DIMS(ap), nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(shape, PyArray_SHAPE(arrays[0]), ndim * sizeof(shape[0]));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1243:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(tmp, sw1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1244:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw1, sw2, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1245:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw2, tmp, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2540:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char c[4];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:3046:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static char repr[100];\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 4059 in approximately 0.03 seconds (143600 lines/second)\nPhysical Source Lines of Code (SLOC) = 3226\nHits@level = [0]   0 [1]   0 [2]   7 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   7 [2+]   7 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.16987 [1+] 2.16987 [2+] 2.16987 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/multiarraymodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:229:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dims, PyArray_DIMS(ap), nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:451:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(data, PyArray_DATA(mps[i]), numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1090:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(tmp, sw1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1091:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw1, sw2, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1092:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw2, tmp, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2618:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char c[4];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:3117:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static char repr[100];\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 4050 in approximately 0.03 seconds (147898 lines/second)\nPhysical Source Lines of Code (SLOC) = 3284\nHits@level = [0]   0 [1]   0 [2]   7 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   7 [2+]   7 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.13155 [1+] 2.13155 [2+] 2.13155 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/multiarraymodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:230:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dims, PyArray_DIMS(ap), nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(shape, PyArray_SHAPE(arrays[0]), ndim * sizeof(shape[0]));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1243:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(tmp, sw1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1244:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw1, sw2, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1245:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw2, tmp, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2540:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char c[4];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:3046:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static char repr[100];\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 4059 in approximately 0.03 seconds (152826 lines/second)\nPhysical Source Lines of Code (SLOC) = 3226\nHits@level = [0]   0 [1]   0 [2]   7 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   7 [2+]   7 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.16987 [1+] 2.16987 [2+] 2.16987 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/multiarraymodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:229:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dims, PyArray_DIMS(ap), nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:451:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(data, PyArray_DATA(mps[i]), numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1090:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(tmp, sw1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1091:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw1, sw2, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1092:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw2, tmp, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2618:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char c[4];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:3117:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static char repr[100];\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 4050 in approximately 0.03 seconds (154074 lines/second)\nPhysical Source Lines of Code (SLOC) = 3284\nHits@level = [0]   0 [1]   0 [2]   7 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   7 [2+]   7 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.13155 [1+] 2.13155 [2+] 2.13155 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/multiarraymodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:230:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(dims, PyArray_DIMS(ap), nd*sizeof(npy_intp));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(shape, PyArray_SHAPE(arrays[0]), ndim * sizeof(shape[0]));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1243:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(tmp, sw1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1244:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw1, sw2, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:1245:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(sw2, tmp, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:2540:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char c[4];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c:3046:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static char repr[100];\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 4059 in approximately 0.03 seconds (151896 lines/second)\nPhysical Source Lines of Code (SLOC) = 3226\nHits@level = [0]   0 [1]   0 [2]   7 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   7 [2+]   7 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.16987 [1+] 2.16987 [2+] 2.16987 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/_libs/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:629:  [4] (format) snprintf:\n  If format strings can be influenced by an attacker, they can be exploited,\n  and note that sprintf variations do not always \0-terminate (CWE-134). Use\n  a constant for the format specification.\n        snprintf(self->error_msg, bufsize,                                    \","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1437:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1438:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int64_t length = strlen(msg),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:427:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        strncpy(self->warn_msg, msg, strlen(msg) + 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:429:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:433:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n            strncpy(self->warn_msg + ex_length, msg, strlen(msg) + 1);",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1208:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1435:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int bufsize = sizeof(char) * (strlen(item) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1441:  [1] (buffer) strncpy:\n  Easily used incorrectly; doesn't always \0-terminate or check for invalid\n  pointers [MS-banned] (CWE-120).\n    strncpy(tmp, item, bufsize);\n\nANALYSIS SUMMARY:\n\nHits = 12\nLines analyzed = 2032 in approximately 0.02 seconds (121624 lines/second)\nPhysical Source Lines of Code (SLOC) = 1462\nHits@level = [0]  15 [1]   9 [2]   2 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]  27 [1+]  12 [2+]   3 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 18.4679 [1+] 8.20793 [2+] 2.05198 [3+] 0.683995 [4+] 0.683995 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1905:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:902:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1182:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1467:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1550:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1772:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1901:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1902:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1581:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1862:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1904:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2513 in approximately 0.02 seconds (140608 lines/second)\nPhysical Source Lines of Code (SLOC) = 1699\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 17.0689 [1+] 11.183 [2+] 8.24014 [3+] 2.35433 [4+] 2.35433 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1905:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:902:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1182:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1467:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1550:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1772:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1901:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1902:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1581:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1862:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1904:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2513 in approximately 0.02 seconds (135617 lines/second)\nPhysical Source Lines of Code (SLOC) = 1699\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 17.0689 [1+] 11.183 [2+] 8.24014 [3+] 2.35433 [4+] 2.35433 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1905:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:902:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1182:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1467:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1550:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1772:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1901:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1902:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1581:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1862:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1904:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2513 in approximately 0.02 seconds (140035 lines/second)\nPhysical Source Lines of Code (SLOC) = 1699\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 17.0689 [1+] 11.183 [2+] 8.24014 [3+] 2.35433 [4+] 2.35433 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1905:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:902:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1182:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1467:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1550:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1772:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1901:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1902:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1581:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1862:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1904:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2513 in approximately 0.02 seconds (136782 lines/second)\nPhysical Source Lines of Code (SLOC) = 1699\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 17.0689 [1+] 11.183 [2+] 8.24014 [3+] 2.35433 [4+] 2.35433 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1823:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:857:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1104:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1355:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1438:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1660:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1819:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1820:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1469:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1780:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1822:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2266 in approximately 0.02 seconds (139455 lines/second)\nPhysical Source Lines of Code (SLOC) = 1466\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 19.7817 [1+] 12.9604 [2+] 9.5498 [3+] 2.72851 [4+] 2.72851 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.h:94:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define TRACE(X) printf X;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 267 in approximately 0.00 seconds (60137 lines/second)\nPhysical Source Lines of Code (SLOC) = 154\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 6.49351 [1+] 6.49351 [2+] 6.49351 [3+] 6.49351 [4+] 6.49351 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (138548 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/ujson/python/objToJSON.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:645:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""name"", sizeof(char)*5);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:651:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""data"", sizeof(char)*5);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:713:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""name"", sizeof(char)*5);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:719:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""index"", sizeof(char)*6);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:725:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""data"", sizeof(char)*5);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:789:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""columns"", sizeof(char)*8);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:795:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""index"", sizeof(char)*6);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:801:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(GET_TC(tc)->citemName, ""data"", sizeof(char)*5);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:935:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char labelBuffer[NPY_JSON_BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:1012:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ret[i], cLabel, sizeof(char)*len);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:1528:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char buffer[65536];",/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:404:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        *outLen = strlen(npyarr->columnLabels[idx]),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:410:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        *outLen = strlen(npyarr->rowLabels[idx]),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:681:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    *outLen = strlen(GET_TC(tc)->citemName),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:757:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    *outLen = strlen(GET_TC(tc)->citemName),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c:833:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    *outLen = strlen(GET_TC(tc)->citemName),\n\nANALYSIS SUMMARY:\n\nHits = 16\nLines analyzed = 1706 in approximately 0.01 seconds (142191 lines/second)\nPhysical Source Lines of Code (SLOC) = 1433\nHits@level = [0]   0 [1]   5 [2]  11 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  16 [1+]  16 [2+]  11 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 11.1654 [1+] 11.1654 [2+] 7.6762 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (135934 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:511:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1450:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:443:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:514:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:773:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1004:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1066:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1287:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1447:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1097:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1449:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1889 in approximately 0.01 seconds (133355 lines/second)\nPhysical Source Lines of Code (SLOC) = 1191\nHits@level = [0]  11 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  24 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 20.1511 [1+] 10.9152 [2+] 8.39631 [3+] 1.67926 [4+] 1.67926 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (130689 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:511:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1450:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:443:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:514:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:773:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1004:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1066:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1287:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1447:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1097:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1449:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1889 in approximately 0.01 seconds (134817 lines/second)\nPhysical Source Lines of Code (SLOC) = 1191\nHits@level = [0]  11 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  24 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 20.1511 [1+] 10.9152 [2+] 8.39631 [3+] 1.67926 [4+] 1.67926 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (131285 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:511:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1450:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:443:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:514:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:773:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1004:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1066:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1287:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1447:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1097:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1449:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1889 in approximately 0.01 seconds (135775 lines/second)\nPhysical Source Lines of Code (SLOC) = 1191\nHits@level = [0]  11 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  24 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 20.1511 [1+] 10.9152 [2+] 8.39631 [3+] 1.67926 [4+] 1.67926 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (135924 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:415:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:550:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1726:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:470:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:553:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:820:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1039:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1271:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1341:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1563:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1722:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1723:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:411:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1372:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1683:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1725:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2165 in approximately 0.02 seconds (140008 lines/second)\nPhysical Source Lines of Code (SLOC) = 1396\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 20.7736 [1+] 13.6103 [2+] 10.0287 [3+] 2.86533 [4+] 2.86533 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:415:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:550:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1726:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:470:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:553:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:820:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1039:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1271:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1341:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1563:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1722:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1723:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:411:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1372:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1683:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1725:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2165 in approximately 0.02 seconds (133957 lines/second)\nPhysical Source Lines of Code (SLOC) = 1396\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 20.7736 [1+] 13.6103 [2+] 10.0287 [3+] 2.86533 [4+] 2.86533 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (133229 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:415:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:550:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1726:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:470:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:553:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:820:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1039:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1271:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1341:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1563:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1722:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1723:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:411:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1372:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1683:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1725:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2165 in approximately 0.02 seconds (113369 lines/second)\nPhysical Source Lines of Code (SLOC) = 1396\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 20.7736 [1+] 13.6103 [2+] 10.0287 [3+] 2.86533 [4+] 2.86533 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1905:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:902:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1182:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1467:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1550:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1772:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1901:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1902:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1581:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1862:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1904:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2517 in approximately 0.02 seconds (136412 lines/second)\nPhysical Source Lines of Code (SLOC) = 1703\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 17.0288 [1+] 11.1568 [2+] 8.22079 [3+] 2.3488 [4+] 2.3488 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:511:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1450:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:443:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:514:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:773:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1004:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1066:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1287:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1447:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1097:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1449:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1889 in approximately 0.01 seconds (135372 lines/second)\nPhysical Source Lines of Code (SLOC) = 1191\nHits@level = [0]  11 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  24 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 20.1511 [1+] 10.9152 [2+] 8.39631 [3+] 1.67926 [4+] 1.67926 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (133026 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (136550 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:511:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1450:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:443:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:514:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:773:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1004:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1066:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1287:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1446:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1447:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1097:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1449:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1889 in approximately 0.01 seconds (133304 lines/second)\nPhysical Source Lines of Code (SLOC) = 1191\nHits@level = [0]  11 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  24 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 20.1511 [1+] 10.9152 [2+] 8.39631 [3+] 1.67926 [4+] 1.67926 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (136885 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:505:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1408:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:437:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:508:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:740:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:965:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1026:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1245:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1404:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[2] = {""TRUE"", ""YES""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1405:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[2] = {""FALSE"", ""NO""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1057:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1365:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1407:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 13\nLines analyzed = 1847 in approximately 0.01 seconds (131642 lines/second)\nPhysical Source Lines of Code (SLOC) = 1153\nHits@level = [0]  10 [1]   3 [2]   8 [3]   0 [4]   2 [5]   0\nHits@level+ = [0+]  23 [1+]  13 [2+]  10 [3+]   2 [4+]   2 [5+]   0\nHits/KSLOC@level+ = [0+] 19.948 [1+] 11.2749 [2+] 8.67303 [3+] 1.73461 [4+] 1.73461 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1823:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:857:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1104:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1355:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1438:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1660:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1819:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1820:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1469:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1780:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1822:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2266 in approximately 0.02 seconds (137883 lines/second)\nPhysical Source Lines of Code (SLOC) = 1466\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 19.7817 [1+] 12.9604 [2+] 9.5498 [3+] 2.72851 [4+] 2.72851 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1905:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:902:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1182:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1467:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1550:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1772:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1901:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1902:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1581:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1862:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1904:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2517 in approximately 0.02 seconds (137550 lines/second)\nPhysical Source Lines of Code (SLOC) = 1703\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 17.0288 [1+] 11.1568 [2+] 8.22079 [3+] 2.3488 [4+] 2.3488 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (137723 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (137900 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (141574 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (137366 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (141275 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1793:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:857:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1104:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1355:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1438:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1660:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1789:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1790:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1469:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1750:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1792:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2401 in approximately 0.02 seconds (120828 lines/second)\nPhysical Source Lines of Code (SLOC) = 1594\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 18.1932 [1+] 11.9197 [2+] 8.78294 [3+] 2.50941 [4+] 2.50941 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (142774 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:420:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:425:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:573:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1905:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:481:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:492:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:576:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:902:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1182:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1467:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1550:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1772:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1901:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1902:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:416:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:422:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1581:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1862:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1904:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2517 in approximately 0.02 seconds (137810 lines/second)\nPhysical Source Lines of Code (SLOC) = 1703\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 17.0288 [1+] 11.1568 [2+] 8.22079 [3+] 2.3488 [4+] 2.3488 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:421:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:426:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n        strcpy(self->warn_msg + ex_length, msg);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:579:  [4] (format) sprintf:\n  Potential format string problem (CWE-134). Make format string constant.\n            sprintf(self->error_msg, (""Calling read(nbytes) on source failed. ""","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1975:  [4] (buffer) strcpy:\n  Does not check for buffer overflows when copying to destination [MS-banned]\n  (CWE-120). Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy\n  easily misused).\n    strcpy(tmp, item);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:478:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Expected %d fields in line %d, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:489:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(msg, ""Skipping line %d: expected %d fields, saw %d\n"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:582:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""Unknown error in IO callback"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:935:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1232:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1537:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n                sprintf(self->error_msg, ""'%c' expected after '%c'"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1620:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(self->error_msg, ""EOF inside string starting at line %d"",","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1842:  [2] (misc) fopen:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    FILE *fp = fopen(fname, ""rb"");","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1971:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *tstrs[1] = {""TRUE""};","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1972:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    static const char *fstrs[1] = {""FALSE""};",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:417:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int length = strlen(msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:423:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n        ex_length = strlen(self->warn_msg),,/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1651:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n                  strlen(self->words[word_deletions - 1]) + 1),,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1932:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated; if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    int i, pos, status, n = strlen(item), count = 0;",/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c:1974:  [1] (buffer) strlen:\n  Does not handle strings that are not \0-terminated, if given one it may\n  perform an over-read (it could cause a crash if unprotected) (CWE-126).\n    tmp = malloc(sizeof(char) * (strlen(item) + 1)),\n\nANALYSIS SUMMARY:\n\nHits = 19\nLines analyzed = 2587 in approximately 0.02 seconds (139605 lines/second)\nPhysical Source Lines of Code (SLOC) = 1764\nHits@level = [0]  10 [1]   5 [2]  10 [3]   0 [4]   4 [5]   0\nHits@level+ = [0+]  29 [1+]  19 [2+]  14 [3+]   4 [4+]   4 [5+]   0\nHits/KSLOC@level+ = [0+] 16.4399 [1+] 10.771 [2+] 7.93651 [3+] 2.26757 [4+] 2.26757 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,
flawfinder,pandas,pandas/src/parser/tokenizer.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.h:95:  [4] (format) printf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n#define TRACE(X) printf X;\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 278 in approximately 0.00 seconds (61802 lines/second)\nPhysical Source Lines of Code (SLOC) = 163\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 6.13497 [1+] 6.13497 [2+] 6.13497 [3+] 6.13497 [4+] 6.13497 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,caffe2/operators/utility_ops.h,/media/nimashiri/DATA/vsprojects/ICSE23/vul_utility_ops.h:1092:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(,/media/nimashiri/DATA/vsprojects/ICSE23/vul_utility_ops.h:1096:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(,/media/nimashiri/DATA/vsprojects/ICSE23/vul_utility_ops.h:1149:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(,/media/nimashiri/DATA/vsprojects/ICSE23/vul_utility_ops.h:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 1793 in approximately 0.02 seconds (119182 lines/second)\nPhysical Source Lines of Code (SLOC) = 1444\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 2.77008 [1+] 2.77008 [2+] 2.77008 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:291:  [3] (buffer) getenv:\n  Environment variables are untrustable input if they can be set by an\n  attacker. They can have any content and length, and the same variable can\n  be set more than once (CWE-807, CWE-20). Check environment variables\n  carefully before using them.\n  char* blockingWait = getenv(NCCL_BLOCKING_WAIT);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:500:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    std::memcpy(ncclID, vec.data(), vec.size());\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 1006 in approximately 0.01 seconds (102489 lines/second)\nPhysical Source Lines of Code (SLOC) = 738\nHits@level = [0]   1 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.06504 [1+] 2.71003 [2+] 2.71003 [3+] 1.35501 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:291:  [3] (buffer) getenv:\n  Environment variables are untrustable input if they can be set by an\n  attacker. They can have any content and length, and the same variable can\n  be set more than once (CWE-807, CWE-20). Check environment variables\n  carefully before using them.\n  char* blockingWait = getenv(NCCL_BLOCKING_WAIT);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:500:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    std::memcpy(ncclID, vec.data(), vec.size());\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 1006 in approximately 0.01 seconds (100638 lines/second)\nPhysical Source Lines of Code (SLOC) = 738\nHits@level = [0]   1 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.06504 [1+] 2.71003 [2+] 2.71003 [3+] 1.35501 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:291:  [3] (buffer) getenv:\n  Environment variables are untrustable input if they can be set by an\n  attacker. They can have any content and length, and the same variable can\n  be set more than once (CWE-807, CWE-20). Check environment variables\n  carefully before using them.\n  char* blockingWait = getenv(NCCL_BLOCKING_WAIT);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:500:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    std::memcpy(ncclID, vec.data(), vec.size());\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 1006 in approximately 0.01 seconds (101603 lines/second)\nPhysical Source Lines of Code (SLOC) = 738\nHits@level = [0]   1 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.06504 [1+] 2.71003 [2+] 2.71003 [3+] 1.35501 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:291:  [3] (buffer) getenv:\n  Environment variables are untrustable input if they can be set by an\n  attacker. They can have any content and length, and the same variable can\n  be set more than once (CWE-807, CWE-20). Check environment variables\n  carefully before using them.\n  char* blockingWait = getenv(NCCL_BLOCKING_WAIT);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:500:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    std::memcpy(ncclID, vec.data(), vec.size());\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 1006 in approximately 0.01 seconds (97315 lines/second)\nPhysical Source Lines of Code (SLOC) = 738\nHits@level = [0]   1 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.06504 [1+] 2.71003 [2+] 2.71003 [3+] 1.35501 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:291:  [3] (buffer) getenv:\n  Environment variables are untrustable input if they can be set by an\n  attacker. They can have any content and length, and the same variable can\n  be set more than once (CWE-807, CWE-20). Check environment variables\n  carefully before using them.\n  char* blockingWait = getenv(NCCL_BLOCKING_WAIT);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:500:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    std::memcpy(ncclID, vec.data(), vec.size());\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 1006 in approximately 0.01 seconds (101510 lines/second)\nPhysical Source Lines of Code (SLOC) = 738\nHits@level = [0]   1 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.06504 [1+] 2.71003 [2+] 2.71003 [3+] 1.35501 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:291:  [3] (buffer) getenv:\n  Environment variables are untrustable input if they can be set by an\n  attacker. They can have any content and length, and the same variable can\n  be set more than once (CWE-807, CWE-20). Check environment variables\n  carefully before using them.\n  char* blockingWait = getenv(NCCL_BLOCKING_WAIT);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:500:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    std::memcpy(ncclID, vec.data(), vec.size());\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 1006 in approximately 0.01 seconds (102394 lines/second)\nPhysical Source Lines of Code (SLOC) = 738\nHits@level = [0]   1 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.06504 [1+] 2.71003 [2+] 2.71003 [3+] 1.35501 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:291:  [3] (buffer) getenv:\n  Environment variables are untrustable input if they can be set by an\n  attacker. They can have any content and length, and the same variable can\n  be set more than once (CWE-807, CWE-20). Check environment variables\n  carefully before using them.\n  char* blockingWait = getenv(NCCL_BLOCKING_WAIT);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp:500:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    std::memcpy(ncclID, vec.data(), vec.size());\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 1006 in approximately 0.01 seconds (102864 lines/second)\nPhysical Source Lines of Code (SLOC) = 738\nHits@level = [0]   1 [1]   0 [2]   1 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   2 [2+]   2 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 4.06504 [1+] 2.71003 [2+] 2.71003 [3+] 1.35501 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/csrc/cuda/python_nccl.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_python_nccl.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_python_nccl.cpp:113:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(&commId, id, NCCL_UNIQUE_ID_BYTES);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 299 in approximately 0.00 seconds (62831 lines/second)\nPhysical Source Lines of Code (SLOC) = 255\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.92157 [1+] 3.92157 [2+] 3.92157 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/csrc/cuda/python_nccl.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_python_nccl.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_python_nccl.cpp:111:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(&commId, id, NCCL_UNIQUE_ID_BYTES);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 312 in approximately 0.01 seconds (58252 lines/second)\nPhysical Source Lines of Code (SLOC) = 254\nHits@level = [0]   0 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.93701 [1+] 3.93701 [2+] 3.93701 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp:53:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return operatorLookupTable_.read([&] (const ska::flat_hash_map<OperatorName, OperatorHandle>& operatorLookupTable) -> c10::optional<OperatorHandle> {\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 335 in approximately 0.01 seconds (62109 lines/second)\nPhysical Source Lines of Code (SLOC) = 254\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.93701 [1+] 3.93701 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp:53:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return operatorLookupTable_.read([&] (const ska::flat_hash_map<OperatorName, OperatorHandle>& operatorLookupTable) -> c10::optional<OperatorHandle> {\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 334 in approximately 0.01 seconds (60008 lines/second)\nPhysical Source Lines of Code (SLOC) = 253\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.95257 [1+] 3.95257 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp:53:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return operatorLookupTable_.read([&] (const ska::flat_hash_map<OperatorName, OperatorHandle>& operatorLookupTable) -> c10::optional<OperatorHandle> {\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 190 in approximately 0.00 seconds (41963 lines/second)\nPhysical Source Lines of Code (SLOC) = 147\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.80272 [1+] 6.80272 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (47339 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (47042 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp:53:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return operatorLookupTable_.read([&] (const ska::flat_hash_map<OperatorName, OperatorHandle>& operatorLookupTable) -> c10::optional<OperatorHandle> {\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 190 in approximately 0.00 seconds (43934 lines/second)\nPhysical Source Lines of Code (SLOC) = 147\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 6.80272 [1+] 6.80272 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (46845 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (43486 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/FileStore.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:82:  [2] (misc) open:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    fd_ = syscall(std::bind(::open, path.c_str(), flags, 0644));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:126:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  void read(void* buf, size_t count) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:128:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n      auto rv = syscall(std::bind(::read, fd_, buf, count));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:149:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  void read(std::string& str) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:151:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(&len, sizeof(len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:153:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(buf.data(), len);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:157:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  void read(std::vector<uint8_t>& data) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:159:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(&len, sizeof(len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:161:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(data.data(), len);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:178:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n      file.read(tmpKey);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:179:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n      file.read(tmpValue);\n\nANALYSIS SUMMARY:\n\nHits = 11\nLines analyzed = 283 in approximately 0.00 seconds (60862 lines/second)\nPhysical Source Lines of Code (SLOC) = 224\nHits@level = [0]   0 [1]  10 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  11 [1+]  11 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 49.1071 [1+] 49.1071 [2+] 4.46429 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,torch/lib/c10d/FileStore.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:82:  [2] (misc) open:\n  Check when opening files - can an attacker redirect it (via symlinks),\n  force the opening of special file type (e.g., device files), move things\n  around to create a race condition, control its ancestors, or change its\n  contents? (CWE-362).\n    fd_ = syscall(std::bind(::open, path.c_str(), flags, 0644));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:126:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  void read(void* buf, size_t count) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:128:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n      auto rv = syscall(std::bind(::read, fd_, buf, count));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:149:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  void read(std::string& str) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:151:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(&len, sizeof(len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:153:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(buf.data(), len);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:157:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  void read(std::vector<uint8_t>& data) {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:159:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(&len, sizeof(len));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:161:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    read(data.data(), len);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:178:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n      file.read(tmpKey);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp:179:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n      file.read(tmpValue);\n\nANALYSIS SUMMARY:\n\nHits = 11\nLines analyzed = 283 in approximately 0.00 seconds (60632 lines/second)\nPhysical Source Lines of Code (SLOC) = 224\nHits@level = [0]   0 [1]  10 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  11 [1+]  11 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 49.1071 [1+] 49.1071 [2+] 4.46429 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/TH/generic/THTensor.cpp,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensor.cpp:828:  [4] (format) snprintf:\n  If format strings can be influenced by an attacker, they can be exploited,\n  and note that sprintf variations do not always \0-terminate (CWE-134). Use\n  a constant for the format specification.\n    n += snprintf(str+n, L-n, ""%"" PRId64, tensor->size(i));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensor.cpp:795:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n          memcpy(result_data + offset, input0_data, input0_size*sizeof(scalar_t));\n\nANALYSIS SUMMARY:\n\nHits = 2\nLines analyzed = 845 in approximately 0.01 seconds (91223 lines/second)\nPhysical Source Lines of Code (SLOC) = 701\nHits@level = [0]   3 [1]   0 [2]   1 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   5 [1+]   2 [2+]   2 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 7.13267 [1+] 2.85307 [2+] 2.85307 [3+] 1.42653 [4+] 1.42653 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/TH/generic/THTensorMath.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:298:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tensor_data + i*rowsize, src_data + (index_data[i] - TH_INDEX_BASE)*rowsize, rowsize*sizeof(real));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(result_data + offset, input0_data, input0_size*sizeof(real));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2961:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\nint THTensor_(equal)(THTensor *ta, THTensor* tb)",/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2978:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n                     if (equal && *ta_data != *tb_data) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2983:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n  return equal,\n\nANALYSIS SUMMARY:\n\nHits = 5\nLines analyzed = 3655 in approximately 0.03 seconds (114395 lines/second)\nPhysical Source Lines of Code (SLOC) = 3078\nHits@level = [0]   0 [1]   3 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   5 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.62443 [1+] 1.62443 [2+] 0.649773 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/TH/generic/THTensorMath.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:298:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(tensor_data + i*rowsize, src_data + (index_data[i] - TH_INDEX_BASE)*rowsize, rowsize*sizeof(real));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2941:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(result_data + offset, input0_data, input0_size*sizeof(real));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2961:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\nint THTensor_(equal)(THTensor *ta, THTensor* tb)",/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2978:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n                     if (equal && *ta_data != *tb_data) {,/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c:2983:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n  return equal,\n\nANALYSIS SUMMARY:\n\nHits = 5\nLines analyzed = 3655 in approximately 0.03 seconds (115205 lines/second)\nPhysical Source Lines of Code (SLOC) = 3078\nHits@level = [0]   0 [1]   3 [2]   2 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   5 [1+]   5 [2+]   2 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.62443 [1+] 1.62443 [2+] 0.649773 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (39805 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41574 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40561 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38781 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41769 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (38877 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38229 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (42287 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (39565 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41269 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41704 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41123 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38389 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38071 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38600 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41608 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41125 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41346 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40342 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (37485 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (37343 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/sigtoolsmodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c:787:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n      memcpy(sort_buffer, ip1, elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c:942:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  	    memcpy(ap2_ptr,zptr,is1);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c:953:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  memcpy(temp_ind, a_ind, bytes_in_array);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c:961:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  memcpy(op, sort_buffer + order*is1, os);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c:1002:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n    char zeros[32];  /* Zeros */","/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c:1138:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n        char mystr[255];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c:1201:  [2] (buffer) sprintf:\n  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or\n  vsnprintf. Risk is low because the source has a constant maximum length.\n            sprintf(mystr,""Failure to converge after %d iterations.\n      Design may still be correct."",maxiter);\n\nANALYSIS SUMMARY:\n\nHits = 7\nLines analyzed = 1353 in approximately 0.01 seconds (96914 lines/second)\nPhysical Source Lines of Code (SLOC) = 961\nHits@level = [0]   1 [1]   0 [2]   7 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   8 [1+]   7 [2+]   7 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 8.32466 [1+] 7.28408 [2+] 7.28408 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/interpolate/src/__fitpack.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:209:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(tx,ap_tx->data,nx*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:210:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ty,ap_ty->data,ny*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(wrk1,ap_wrk->data,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:250:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_tx->data,tx,nx*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:251:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_ty->data,ty,ny*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:252:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_c->data,c,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:253:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_wrk->data,wrk1,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:322:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(t,ap_t->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:325:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(wrk,ap_wrk->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:326:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(iwrk,ap_iwrk->data,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:345:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_t->data,t,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:347:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((double *) ap_c->data+i*(n-k-1),c+i*n,(n-k-1)*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:348:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_wrk->data,wrk,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_iwrk->data,iwrk,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:401:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(t,ap_t->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(wrk,ap_wrk->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(iwrk,ap_iwrk->data,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:429:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_t->data,t,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:430:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_c->data,c,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:431:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_wrk->data,wrk,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:432:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_iwrk->data,iwrk,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:575:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ap_z->data,z,m*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:702:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(hh, h, j*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:723:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(hh, h, j*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:983:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(ptr, h, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1017:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ptr, h, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1022:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ptr, h+1, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(ptr, tmp, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:925:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    int k,N,i,numbytes,j, equal;",/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:971:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    if (equal) { /* points equally spaced by 1 */,"/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1066:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    int k,N,i,j, equal, m;",/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1122:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    if (equal) { /* points equally spaced by 1 */\n\nANALYSIS SUMMARY:\n\nHits = 32\nLines analyzed = 1220 in approximately 0.02 seconds (80737 lines/second)\nPhysical Source Lines of Code (SLOC) = 981\nHits@level = [0]   0 [1]   4 [2]  28 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  32 [1+]  32 [2+]  28 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 32.6198 [1+] 32.6198 [2+] 28.5423 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,
flawfinder,scipy,scipy/interpolate/src/__fitpack.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:209:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(tx,ap_tx->data,nx*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:210:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ty,ap_ty->data,ny*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:214:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(wrk1,ap_wrk->data,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:250:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_tx->data,tx,nx*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:251:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_ty->data,ty,ny*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:252:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_c->data,c,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:253:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_wrk->data,wrk1,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:322:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(t,ap_t->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:325:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(wrk,ap_wrk->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:326:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(iwrk,ap_iwrk->data,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:345:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_t->data,t,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:347:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy((double *) ap_c->data+i*(n-k-1),c+i*n,(n-k-1)*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:348:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_wrk->data,wrk,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:349:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_iwrk->data,iwrk,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:401:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(t,ap_t->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:404:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(wrk,ap_wrk->data,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:405:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(iwrk,ap_iwrk->data,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:429:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_t->data,t,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:430:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_c->data,c,lc*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:431:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_wrk->data,wrk,n*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:432:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(ap_iwrk->data,iwrk,n*sizeof(int));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:575:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ap_z->data,z,m*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:702:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(hh, h, j*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:723:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(hh, h, j*sizeof(double));","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:983:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(ptr, h, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1017:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(ptr, h, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1022:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(ptr, h+1, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1153:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(ptr, tmp, numbytes);","/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:925:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    int k,N,i,numbytes,j, equal;",/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:971:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    if (equal) { /* points equally spaced by 1 */,"/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1066:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    int k,N,i,j, equal, m;",/media/nimashiri/DATA/vsprojects/ICSE23/vul___fitpack.h:1122:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    if (equal) { /* points equally spaced by 1 */\n\nANALYSIS SUMMARY:\n\nHits = 32\nLines analyzed = 1220 in approximately 0.02 seconds (74639 lines/second)\nPhysical Source Lines of Code (SLOC) = 981\nHits@level = [0]   0 [1]   4 [2]  28 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  32 [1+]  32 [2+]  28 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 32.6198 [1+] 32.6198 [2+] 28.5423 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities, review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.,,,,
flawfinder,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c:32:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n    fprintf(stderr, msg);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 485 in approximately 0.01 seconds (67108 lines/second)\nPhysical Source Lines of Code (SLOC) = 335\nHits@level = [0]  42 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]  43 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 128.358 [1+] 2.98507 [2+] 2.98507 [3+] 2.98507 [4+] 2.98507 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c:31:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n    fprintf(stderr, msg);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 392 in approximately 0.01 seconds (68200 lines/second)\nPhysical Source Lines of Code (SLOC) = 258\nHits@level = [0]  17 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]  18 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 69.7674 [1+] 3.87597 [2+] 3.87597 [3+] 3.87597 [4+] 3.87597 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (72849 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (72216 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (71125 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (64406 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (67652 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (71877 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (70764 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (70625 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (71679 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (71214 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (67633 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73926 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73344 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (72323 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:532:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char strbuffer[2*BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:535:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char buffer[BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:786:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    memcpy(outptr, DATA(missing_arr), ELSIZE(out));\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 997 in approximately 0.01 seconds (85862 lines/second)\nPhysical Source Lines of Code (SLOC) = 766\nHits@level = [0]   6 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  10 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 13.0548 [1+] 5.22193 [2+] 5.22193 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73563 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (71861 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73855 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (72921 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73775 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73563 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:532:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char strbuffer[2*BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:535:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char buffer[BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:786:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    memcpy(outptr, DATA(missing_arr), ELSIZE(out));\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 997 in approximately 0.01 seconds (89374 lines/second)\nPhysical Source Lines of Code (SLOC) = 766\nHits@level = [0]   6 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  10 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 13.0548 [1+] 5.22193 [2+] 5.22193 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (66900 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (72482 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (72312 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73022 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (72205 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:532:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char strbuffer[2*BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:535:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char buffer[BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:786:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    memcpy(outptr, DATA(missing_arr), ELSIZE(out));\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 997 in approximately 0.01 seconds (83393 lines/second)\nPhysical Source Lines of Code (SLOC) = 766\nHits@level = [0]   6 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  10 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 13.0548 [1+] 5.22193 [2+] 5.22193 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (74444 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (68453 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73361 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:532:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char strbuffer[2*BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:535:  [2] (buffer) char:\n  Statically-sized arrays can be improperly restricted, leading to potential\n  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use\n  functions that limit length, or ensure that the size is larger than the\n  maximum possible length.\n  char buffer[BUFSIZE];","/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:786:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    memcpy(outptr, DATA(missing_arr), ELSIZE(out));\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 997 in approximately 0.01 seconds (87526 lines/second)\nPhysical Source Lines of Code (SLOC) = 766\nHits@level = [0]   6 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]  10 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 13.0548 [1+] 5.22193 [2+] 5.22193 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (73418 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,Lib/io/numpyiomodule.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c:166:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buff_ptr, arr->data+indx, arr->descr->elsize);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 652 in approximately 0.01 seconds (70308 lines/second)\nPhysical Source Lines of Code (SLOC) = 449\nHits@level = [0]   6 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   7 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 15.5902 [1+] 2.22717 [2+] 2.22717 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/tensor_shape.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:339:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:351:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:367:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:381:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(buf(), b.buf(), sizeof(u_.buf));\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 391 in approximately 0.01 seconds (75011 lines/second)\nPhysical Source Lines of Code (SLOC) = 202\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 19.802 [1+] 19.802 [2+] 19.802 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:180:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 687 in approximately 0.01 seconds (98230 lines/second)\nPhysical Source Lines of Code (SLOC) = 388\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.57732 [1+] 2.57732 [2+] 2.57732 [3+] 2.57732 [4+] 2.57732 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:180:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 684 in approximately 0.01 seconds (99030 lines/second)\nPhysical Source Lines of Code (SLOC) = 385\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.5974 [1+] 2.5974 [2+] 2.5974 [3+] 2.5974 [4+] 2.5974 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:177:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 568 in approximately 0.01 seconds (88835 lines/second)\nPhysical Source Lines of Code (SLOC) = 317\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.15457 [1+] 3.15457 [2+] 3.15457 [3+] 3.15457 [4+] 3.15457 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:177:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 568 in approximately 0.01 seconds (88871 lines/second)\nPhysical Source Lines of Code (SLOC) = 317\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.15457 [1+] 3.15457 [2+] 3.15457 [3+] 3.15457 [4+] 3.15457 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:180:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 684 in approximately 0.01 seconds (97221 lines/second)\nPhysical Source Lines of Code (SLOC) = 385\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.5974 [1+] 2.5974 [2+] 2.5974 [3+] 2.5974 [4+] 2.5974 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:178:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 590 in approximately 0.01 seconds (87418 lines/second)\nPhysical Source Lines of Code (SLOC) = 323\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.09598 [1+] 3.09598 [2+] 3.09598 [3+] 3.09598 [4+] 3.09598 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:198:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 759 in approximately 0.01 seconds (96093 lines/second)\nPhysical Source Lines of Code (SLOC) = 446\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.24215 [1+] 2.24215 [2+] 2.24215 [3+] 2.24215 [4+] 2.24215 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:180:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 684 in approximately 0.01 seconds (89296 lines/second)\nPhysical Source Lines of Code (SLOC) = 385\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.5974 [1+] 2.5974 [2+] 2.5974 [3+] 2.5974 [4+] 2.5974 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:180:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 684 in approximately 0.01 seconds (97522 lines/second)\nPhysical Source Lines of Code (SLOC) = 385\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.5974 [1+] 2.5974 [2+] 2.5974 [3+] 2.5974 [4+] 2.5974 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:177:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 568 in approximately 0.01 seconds (86764 lines/second)\nPhysical Source Lines of Code (SLOC) = 317\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.15457 [1+] 3.15457 [2+] 3.15457 [3+] 3.15457 [4+] 3.15457 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:177:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 568 in approximately 0.01 seconds (86224 lines/second)\nPhysical Source Lines of Code (SLOC) = 317\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.15457 [1+] 3.15457 [2+] 3.15457 [3+] 3.15457 [4+] 3.15457 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:198:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 759 in approximately 0.01 seconds (101858 lines/second)\nPhysical Source Lines of Code (SLOC) = 446\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.24215 [1+] 2.24215 [2+] 2.24215 [3+] 2.24215 [4+] 2.24215 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:178:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 590 in approximately 0.01 seconds (88044 lines/second)\nPhysical Source Lines of Code (SLOC) = 323\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.09598 [1+] 3.09598 [2+] 3.09598 [3+] 3.09598 [4+] 3.09598 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:180:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 687 in approximately 0.01 seconds (95864 lines/second)\nPhysical Source Lines of Code (SLOC) = 388\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.57732 [1+] 2.57732 [2+] 2.57732 [3+] 2.57732 [4+] 2.57732 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:180:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 684 in approximately 0.01 seconds (97403 lines/second)\nPhysical Source Lines of Code (SLOC) = 385\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 2.5974 [1+] 2.5974 [2+] 2.5974 [3+] 2.5974 [4+] 2.5974 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:178:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 590 in approximately 0.01 seconds (93098 lines/second)\nPhysical Source Lines of Code (SLOC) = 323\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.09598 [1+] 3.09598 [2+] 3.09598 [3+] 3.09598 [4+] 3.09598 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/model.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_model.h:178:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n  string long_name() const { return strings::StrCat(name_, ""(id:"", id_, "")""); }\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 590 in approximately 0.01 seconds (91134 lines/second)\nPhysical Source Lines of Code (SLOC) = 323\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 3.09598 [1+] 3.09598 [2+] 3.09598 [3+] 3.09598 [4+] 3.09598 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,third_party/mlir/lib/Parser/Lexer.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp:128:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    return formToken(Token::equal, tokStart);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 401 in approximately 0.01 seconds (76772 lines/second)\nPhysical Source Lines of Code (SLOC) = 267\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.74532 [1+] 3.74532 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,third_party/mlir/lib/Parser/Lexer.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp:126:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    return formToken(Token::equal, tokStart);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 385 in approximately 0.01 seconds (75244 lines/second)\nPhysical Source Lines of Code (SLOC) = 258\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.87597 [1+] 3.87597 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,third_party/mlir/lib/Parser/Lexer.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp:126:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    return formToken(Token::equal, tokStart);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 385 in approximately 0.01 seconds (75977 lines/second)\nPhysical Source Lines of Code (SLOC) = 258\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.87597 [1+] 3.87597 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,third_party/mlir/lib/Parser/Lexer.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp:128:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    return formToken(Token::equal, tokStart);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 401 in approximately 0.01 seconds (76482 lines/second)\nPhysical Source Lines of Code (SLOC) = 267\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.74532 [1+] 3.74532 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,third_party/mlir/lib/Parser/Lexer.cpp,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_Lexer.cpp:128:  [1] (buffer) equal:\n  Function does not check the second iterator for over-read conditions\n  (CWE-126). This function is often discouraged by most C++ coding standards\n  in favor of its safer alternatives provided since C++14. Consider using a\n  form of this function that checks the second iterator before potentially\n  overflowing it.\n    return formToken(Token::equal, tokStart);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 401 in approximately 0.01 seconds (77096 lines/second)\nPhysical Source Lines of Code (SLOC) = 267\nHits@level = [0]   0 [1]   1 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 3.74532 [1+] 3.74532 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/lib/random/random_distributions.h,/media/nimashiri/DATA/vsprojects/ICSE23/vul_random_distributions.h:26:  [3] (random) random:\n  This function is not sufficiently random for security-related functions\n  such as key and nonce creation (CWE-327). Use a more secure technique for\n  acquiring random values.\nnamespace random {,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_random_distributions.h:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(&result, &val, sizeof(val));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_random_distributions.h:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(&result, &val, sizeof(val));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 377 in approximately 0.01 seconds (73437 lines/second)\nPhysical Source Lines of Code (SLOC) = 234\nHits@level = [0]   0 [1]   0 [2]   2 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 12.8205 [1+] 12.8205 [2+] 12.8205 [3+] 4.2735 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/lib/random/random_distributions.h,/media/nimashiri/DATA/vsprojects/ICSE23/vul_random_distributions.h:26:  [3] (random) random:\n  This function is not sufficiently random for security-related functions\n  such as key and nonce creation (CWE-327). Use a more secure technique for\n  acquiring random values.\nnamespace random {,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_random_distributions.h:350:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(&result, &val, sizeof(val));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_random_distributions.h:369:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(&result, &val, sizeof(val));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 377 in approximately 0.01 seconds (70419 lines/second)\nPhysical Source Lines of Code (SLOC) = 234\nHits@level = [0]   0 [1]   0 [2]   2 [3]   1 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   1 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 12.8205 [1+] 12.8205 [2+] 12.8205 [3+] 4.2735 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/tensor_shape.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:331:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:343:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:359:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:373:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(buf(), b.buf(), sizeof(u_.buf));\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 383 in approximately 0.01 seconds (68257 lines/second)\nPhysical Source Lines of Code (SLOC) = 199\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.1005 [1+] 20.1005 [2+] 20.1005 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/core/framework/tensor_shape.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:331:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:343:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:359:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n    memcpy(buf(), b.buf(), sizeof(u_.buf));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_tensor_shape.h:373:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n  memcpy(buf(), b.buf(), sizeof(u_.buf));\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 383 in approximately 0.01 seconds (69878 lines/second)\nPhysical Source Lines of Code (SLOC) = 199\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.1005 [1+] 20.1005 [2+] 20.1005 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,tensorflow,tensorflow/compiler/xla/service/backend.h,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_backend.h\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_backend.h:136:  [4] (buffer) StrCat:\n  Does not check for buffer overflows when concatenating to destination\n  [MS-banned] (CWE-120).\n    return tensorflow::strings::StrCat(platform_->Name(), "":"", device_ordinal);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 195 in approximately 0.00 seconds (44823 lines/second)\nPhysical Source Lines of Code (SLOC) = 88\nHits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]   1 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 11.3636 [1+] 11.3636 [2+] 11.3636 [3+] 11.3636 [4+] 11.3636 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1662:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1719:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2230 in approximately 0.02 seconds (130414 lines/second)\nPhysical Source Lines of Code (SLOC) = 1724\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74014 [1+] 1.74014 [2+] 1.74014 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1662:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1719:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2230 in approximately 0.02 seconds (125272 lines/second)\nPhysical Source Lines of Code (SLOC) = 1724\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74014 [1+] 1.74014 [2+] 1.74014 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,numpy,numpy/core/src/multiarray/mapping.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1662:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(coord, mit->bscoord, sizeof(npy_intp)*PyArray_NDIM(mit->ait->ao));","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:1719:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n            memcpy(coord, mit->bscoord,","/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c:2026:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n        memcpy(mit->dimensions, PyArray_DIMS(arr), mit->nd*sizeof(npy_intp));\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 2230 in approximately 0.02 seconds (132023 lines/second)\nPhysical Source Lines of Code (SLOC) = 1724\nHits@level = [0]   0 [1]   0 [2]   3 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   3 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 1.74014 [1+] 1.74014 [2+] 1.74014 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (46398 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (46465 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (44569 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,pytorch,aten/src/ATen/core/dispatch/Dispatcher.h,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:186:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:208:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n  return backendFallbackKernels.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) -> Return {","/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.h:218:  [1] (buffer) read:\n  Check buffer boundaries if used in a loop including recursive loops\n  (CWE-120, CWE-20).\n    return backendFallbackKernels_.read([&] (const ska::flat_hash_map<TensorTypeId, KernelFunction>& backendFallbackKernels) {\n\nANALYSIS SUMMARY:\n\nHits = 3\nLines analyzed = 261 in approximately 0.01 seconds (46841 lines/second)\nPhysical Source Lines of Code (SLOC) = 148\nHits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   3 [1+]   3 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 20.2703 [1+] 20.2703 [2+]   0 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (36701 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (39433 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (36797 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38126 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38471 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (38039 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40062 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (39681 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (39269 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41570 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41662 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41928 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.01 seconds (28581 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40877 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40994 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40801 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (39891 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (41110 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40949 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (39103 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/signal/firfilter.c,"/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:164:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	  if (bounds_pad_flag) memcpy(value,fillvalue,type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:178:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    if (bounds_pad_flag) memcpy(value, fillvalue, type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:179:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	    else memcpy(value, in+ind0_memory+ind1*instr[1], type_size);","/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c:184:  [2] (buffer) memcpy:\n  Does not check for buffer overflows when copying to destination (CWE-120).\n  Make sure destination can always hold the source data.\n	memcpy(out+m*outstr[0]+n*outstr[1], sum, type_size);\n\nANALYSIS SUMMARY:\n\nHits = 4\nLines analyzed = 194 in approximately 0.00 seconds (40986 lines/second)\nPhysical Source Lines of Code (SLOC) = 157\nHits@level = [0]   0 [1]   0 [2]   4 [3]   0 [4]   0 [5]   0\nHits@level+ = [0+]   4 [1+]   4 [2+]   4 [3+]   0 [4+]   0 [5+]   0\nHits/KSLOC@level+ = [0+] 25.4777 [1+] 25.4777 [2+] 25.4777 [3+]   0 [4+]   0 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c:32:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n    fprintf(stderr, msg);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 485 in approximately 0.01 seconds (62373 lines/second)\nPhysical Source Lines of Code (SLOC) = 335\nHits@level = [0]  42 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]  43 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 128.358 [1+] 2.98507 [2+] 2.98507 [3+] 2.98507 [4+] 2.98507 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
flawfinder,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,"Number of rules (primarily dangerous function names) in C/C++ ruleset: 222\nExamining /media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c\n\nFINAL RESULTS:\n\n/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c:31:  [4] (format) fprintf:\n  If format strings can be influenced by an attacker, they can be exploited\n  (CWE-134). Use a constant for the format specification.\n    fprintf(stderr, msg);\n\nANALYSIS SUMMARY:\n\nHits = 1\nLines analyzed = 392 in approximately 0.01 seconds (66978 lines/second)\nPhysical Source Lines of Code (SLOC) = 258\nHits@level = [0]  17 [1]   0 [2]   0 [3]   0 [4]   1 [5]   0\nHits@level+ = [0+]  18 [1+]   1 [2+]   1 [3+]   1 [4+]   1 [5+]   0\nHits/KSLOC@level+ = [0+] 69.7674 [1+] 3.87597 [2+] 3.87597 [3+] 3.87597 [4+] 3.87597 [5+]   0\nMinimum risk level = 1\n\nNot every hit is necessarily a security vulnerability.\nYou can inhibit a report by adding a comment in this form:\n// flawfinder: ignore\nMake *sure* it's a false positive!\nYou can use the option --neverignore to show these.\n\nThere may be other security vulnerabilities; review your code!\nSee 'Secure Programming HOWTO'\n(https://dwheeler.com/secure-programs) for more information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>251</line>\n    <line>399</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>251</line>\n    <line>399</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>111</line>\n    <line>256</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>111</line>\n    <line>256</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>99</line>\n    <line>248</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>99</line>\n    <line>248</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>111</line>\n    <line>256</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>111</line>\n    <line>256</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>251</line>\n    <line>399</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>251</line>\n    <line>399</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>111</line>\n    <line>256</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>111</line>\n    <line>256</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/methods/hmm/hmm_train_main.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>99</line>\n    <line>248</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_hmm_train_main.cpp</name>\n    <line>99</line>\n    <line>248</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/core/util/backtrace.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp</name>\n    <line>111</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/core/util/backtrace.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp</name>\n    <line>115</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/core/util/backtrace.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp</name>\n    <line>115</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,mlpack,src/mlpack/core/util/backtrace.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_backtrace.cpp</name>\n    <line>118</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>632</line>\n  </file>\n']",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1297</line>\n    <line>1326</line>\n    <line>1439</line>\n    <line>3433</line>\n    <line>3835</line>\n    <line>3907</line>\n    <line>4214</line>\n    <line>4293</line>\n    <line>5762</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>629</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2934</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>408</line>\n  </file>\n']",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1144</line>\n    <line>1173</line>\n    <line>1286</line>\n    <line>3225</line>\n    <line>3592</line>\n    <line>3664</line>\n    <line>3977</line>\n    <line>4056</line>\n    <line>5619</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>405</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2743</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>948</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1060</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>629</line>\n  </file>\n']",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1232</line>\n    <line>1346</line>\n    <line>2747</line>\n    <line>3150</line>\n    <line>3221</line>\n    <line>3533</line>\n    <line>3613</line>\n    <line>5875</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>626</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2387</line>\n    <line>5571</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2387</line>\n    <line>5571</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/nditer_pywrap.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_nditer_pywrap.c</name>\n    <line>36</line>\n    <line>37</line>\n    <line>867</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_nditer_pywrap.c</name>\n    <line>36</line>\n    <line>37</line>\n    <line>867</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_nditer_pywrap.c</name>\n    <line>36</line>\n    <line>37</line>\n    <line>867</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1809</line>\n    <line>1855</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1809</line>\n    <line>1855</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1809</line>\n    <line>1855</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1809</line>\n    <line>1855</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/convert_datatype.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_convert_datatype.c</name>\n    <line>1680</line>\n    <line>1726</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>230</line>\n    <line>237</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>230</line>\n    <line>237</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>114</line>\n  </file>\n""]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>230</line>\n    <line>237</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>230</line>\n    <line>237</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>114</line>\n  </file>\n""]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1656</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1680</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3465</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1632</line>\n    <line>1865</line>\n    <line>1877</line>\n    <line>3538</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1632</line>\n    <line>1865</line>\n    <line>1877</line>\n    <line>3538</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1632</line>\n    <line>1865</line>\n    <line>1877</line>\n    <line>3538</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1632</line>\n    <line>1865</line>\n    <line>1877</line>\n    <line>3538</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1702</line>\n    <line>1733</line>\n    <line>2888</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1702</line>\n    <line>1733</line>\n    <line>2888</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1702</line>\n    <line>1733</line>\n    <line>2888</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1656</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1680</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1656</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1718</line>\n    <line>1750</line>\n    <line>2830</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1680</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1746</line>\n    <line>1778</line>\n    <line>2858</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/arrayobject.c,['\n  <severity>High</severity>\n  <type>printf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 1 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>561</line>\n    <line>571</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>printf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 1 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>561</line>\n    <line>571</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>269</line>\n    <line>720</line>\n    <line>726</line>\n    <line>846</line>\n    <line>869</line>\n    <line>1165</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>269</line>\n    <line>720</line>\n    <line>726</line>\n    <line>846</line>\n    <line>869</line>\n    <line>1165</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>269</line>\n    <line>720</line>\n    <line>726</line>\n    <line>846</line>\n    <line>869</line>\n    <line>1165</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>269</line>\n    <line>720</line>\n    <line>726</line>\n    <line>846</line>\n    <line>869</line>\n    <line>1165</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>269</line>\n    <line>720</line>\n    <line>726</line>\n    <line>846</line>\n    <line>869</line>\n    <line>1165</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_arrayobject.c</name>\n    <line>269</line>\n    <line>720</line>\n    <line>726</line>\n    <line>846</line>\n    <line>869</line>\n    <line>1165</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1947</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>152</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>58</line>\n    <line>3008</line>\n    <line>3185</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>58</line>\n    <line>3008</line>\n    <line>3185</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>58</line>\n    <line>3008</line>\n    <line>3185</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1947</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>152</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>58</line>\n    <line>3008</line>\n    <line>3185</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>58</line>\n    <line>3008</line>\n    <line>3185</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>58</line>\n    <line>3008</line>\n    <line>3185</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>515</line>\n    <line>519</line>\n    <line>552</line>\n    <line>654</line>\n    <line>793</line>\n    <line>872</line>\n    <line>1343</line>\n    <line>1346</line>\n    <line>1447</line>\n    <line>1457</line>\n    <line>2168</line>\n    <line>2380</line>\n    <line>2414</line>\n    <line>3213</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2207</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3811</line>\n    <line>4004</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3811</line>\n    <line>4004</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3811</line>\n    <line>4004</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1048</line>\n    <line>1051</line>\n    <line>1159</line>\n    <line>1169</line>\n    <line>2453</line>\n    <line>4032</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2015</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>167</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>70</line>\n    <line>3304</line>\n    <line>3500</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>382</line>\n    <line>390</line>\n    <line>898</line>\n    <line>901</line>\n    <line>1004</line>\n    <line>1014</line>\n    <line>2293</line>\n    <line>3528</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2058</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>158</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>64</line>\n    <line>3421</line>\n    <line>3611</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>361</line>\n    <line>365</line>\n    <line>918</line>\n    <line>921</line>\n    <line>1028</line>\n    <line>1038</line>\n    <line>2290</line>\n    <line>3639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2321</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>191</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>93</line>\n    <line>3762</line>\n    <line>3951</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>93</line>\n    <line>3762</line>\n    <line>3951</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>93</line>\n    <line>3762</line>\n    <line>3951</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1860</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3207</line>\n    <line>3396</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3207</line>\n    <line>3396</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3207</line>\n    <line>3396</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>434</line>\n    <line>438</line>\n    <line>1059</line>\n    <line>1062</line>\n    <line>1160</line>\n    <line>1170</line>\n    <line>2092</line>\n    <line>3424</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2321</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>191</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>93</line>\n    <line>3762</line>\n    <line>3951</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>93</line>\n    <line>3762</line>\n    <line>3951</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>93</line>\n    <line>3762</line>\n    <line>3951</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>406</line>\n    <line>414</line>\n    <line>956</line>\n    <line>959</line>\n    <line>1071</line>\n    <line>1083</line>\n    <line>2672</line>\n    <line>3979</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3334</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1598</line>\n    <line>1629</line>\n    <line>2757</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1598</line>\n    <line>1629</line>\n    <line>2757</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1598</line>\n    <line>1629</line>\n    <line>2757</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1761</line>\n    <line>1773</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1761</line>\n    <line>1773</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1761</line>\n    <line>1773</line>\n    <line>3407</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1325</line>\n    <line>1336</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1325</line>\n    <line>1336</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1493</line>\n    <line>1499</line>\n    <line>1501</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1493</line>\n    <line>1499</line>\n    <line>1501</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1493</line>\n    <line>1499</line>\n    <line>1501</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1687</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1700</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1776</line>\n    <line>1808</line>\n    <line>2902</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1776</line>\n    <line>1808</line>\n    <line>2902</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1776</line>\n    <line>1808</line>\n    <line>2902</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1687</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1347</line>\n    <line>1358</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1347</line>\n    <line>1358</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1515</line>\n    <line>1521</line>\n    <line>1523</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1515</line>\n    <line>1521</line>\n    <line>1523</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1515</line>\n    <line>1521</line>\n    <line>1523</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1687</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1753</line>\n    <line>1785</line>\n    <line>2875</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2156</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3757</line>\n    <line>3947</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3757</line>\n    <line>3947</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3757</line>\n    <line>3947</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>1043</line>\n    <line>1046</line>\n    <line>1153</line>\n    <line>1163</line>\n    <line>2399</line>\n    <line>3975</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/f2py/src/fortranobject.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>printf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 1 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>470</line>\n    <line>477</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>printf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 1 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>470</line>\n    <line>477</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>523</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>238</line>\n    <line>248</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>238</line>\n    <line>248</line>\n  </file>\n']"
rats,numpy,numpy/f2py/src/fortranobject.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>122</line>\n    <line>124</line>\n    <line>128</line>\n    <line>130</line>\n    <line>539</line>\n  </file>\n'],"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>108</line>\n    <line>111</line>\n    <line>114</line>\n    <line>119</line>\n    <line>122</line>\n    <line>124</line>\n    <line>125</line>\n    <line>128</line>\n    <line>130</line>\n    <line>131</line>\n    <line>133</line>\n    <line>137</line>\n    <line>539</line>\n    <line>652</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>printf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 1 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>470</line>\n    <line>477</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>printf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 1 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>470</line>\n    <line>477</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>523</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>700</line>\n    <line>713</line>\n    <line>726</line>\n    <line>738</line>\n    <line>766</line>\n    <line>784</line>\n    <line>787</line>\n    <line>789</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>106</line>\n    <line>138</line>\n    <line>139</line>\n    <line>539</line>\n    <line>540</line>\n    <line>575</line>\n    <line>577</line>\n    <line>606</line>\n    <line>608</line>\n    <line>610</line>\n    <line>615</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>238</line>\n    <line>248</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_fortranobject.c</name>\n    <line>238</line>\n    <line>248</line>\n  </file>\n']"
rats,numpy,numpy/core/src/multiarray/common.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_common.c</name>\n    <line>375</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/item_selection.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c</name>\n    <line>647</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>2043</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>2043</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1710</line>\n    <line>1763</line>\n    <line>2073</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1710</line>\n    <line>1763</line>\n    <line>2073</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1710</line>\n    <line>1763</line>\n    <line>2073</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/methods.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1431</line>\n    <line>1469</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1431</line>\n    <line>1469</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/multiarraymodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>1904</line>\n    <line>2261</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>1904</line>\n    <line>2261</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>219</line>\n    <line>441</line>\n    <line>900</line>\n    <line>1057</line>\n    <line>1058</line>\n    <line>1059</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>219</line>\n    <line>441</line>\n    <line>900</line>\n    <line>1057</line>\n    <line>1058</line>\n    <line>1059</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>219</line>\n    <line>441</line>\n    <line>900</line>\n    <line>1057</line>\n    <line>1058</line>\n    <line>1059</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>219</line>\n    <line>441</line>\n    <line>900</line>\n    <line>1057</line>\n    <line>1058</line>\n    <line>1059</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>219</line>\n    <line>441</line>\n    <line>900</line>\n    <line>1057</line>\n    <line>1058</line>\n    <line>1059</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>219</line>\n    <line>441</line>\n    <line>900</line>\n    <line>1057</line>\n    <line>1058</line>\n    <line>1059</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/reduction.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_reduction.c</name>\n    <line>57</line>\n    <line>328</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_reduction.c</name>\n    <line>57</line>\n    <line>328</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4877</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4862</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>5080</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>101</line>\n    <line>1085</line>\n    <line>1116</line>\n    <line>1222</line>\n    <line>2662</line>\n    <line>3038</line>\n    <line>3106</line>\n    <line>3446</line>\n    <line>3521</line>\n    <line>4725</line>\n    <line>4878</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>586</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>698</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>583</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2136</line>\n    <line>3087</line>\n    <line>3145</line>\n    <line>3349</line>\n    <line>3501</line>\n    <line>3561</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_type_resolution.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_type_resolution.c</name>\n    <line>1459</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/item_selection.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c</name>\n    <line>601</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/item_selection.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c</name>\n    <line>601</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1862</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>669</line>\n    <line>2023</line>\n    <line>2076</line>\n    <line>2379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>669</line>\n    <line>2023</line>\n    <line>2076</line>\n    <line>2379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>669</line>\n    <line>2023</line>\n    <line>2076</line>\n    <line>2379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>669</line>\n    <line>2023</line>\n    <line>2076</line>\n    <line>2379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>669</line>\n    <line>2023</line>\n    <line>2076</line>\n    <line>2379</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>197</line>\n    <line>390</line>\n    <line>397</line>\n    <line>405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>197</line>\n    <line>390</line>\n    <line>397</line>\n    <line>405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>197</line>\n    <line>390</line>\n    <line>397</line>\n    <line>405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>197</line>\n    <line>390</line>\n    <line>397</line>\n    <line>405</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>119</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>835</line>\n    <line>855</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>835</line>\n    <line>855</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>196</line>\n    <line>383</line>\n    <line>390</line>\n    <line>398</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>196</line>\n    <line>383</line>\n    <line>390</line>\n    <line>398</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>196</line>\n    <line>383</line>\n    <line>390</line>\n    <line>398</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>196</line>\n    <line>383</line>\n    <line>390</line>\n    <line>398</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>118</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>798</line>\n    <line>816</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>798</line>\n    <line>816</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>954</line>\n    <line>974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>954</line>\n    <line>974</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>122</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>629</line>\n    <line>649</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>629</line>\n    <line>649</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>954</line>\n    <line>974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>954</line>\n    <line>974</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>122</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>629</line>\n    <line>649</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>629</line>\n    <line>649</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>207</line>\n    <line>411</line>\n    <line>418</line>\n    <line>426</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>954</line>\n    <line>974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>954</line>\n    <line>974</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/buffer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>155</line>\n    <line>262</line>\n    <line>269</line>\n    <line>277</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>122</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>629</line>\n    <line>649</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_buffer.c</name>\n    <line>629</line>\n    <line>649</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>776</line>\n    <line>2242</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>776</line>\n    <line>2242</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3435</line>\n    <line>3631</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3435</line>\n    <line>3631</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3435</line>\n    <line>3631</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3659</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3436</line>\n    <line>3632</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3660</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3183</line>\n    <line>3379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3183</line>\n    <line>3379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3183</line>\n    <line>3379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3183</line>\n    <line>3379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3183</line>\n    <line>3379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3183</line>\n    <line>3379</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2190</line>\n    <line>3407</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2100</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>156</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>62</line>\n    <line>3157</line>\n    <line>3346</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>62</line>\n    <line>3157</line>\n    <line>3346</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>62</line>\n    <line>3157</line>\n    <line>3346</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>519</line>\n    <line>523</line>\n    <line>556</line>\n    <line>658</line>\n    <line>797</line>\n    <line>876</line>\n    <line>1394</line>\n    <line>1397</line>\n    <line>1498</line>\n    <line>1508</line>\n    <line>2321</line>\n    <line>2529</line>\n    <line>2563</line>\n    <line>3374</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>1918</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>162</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>68</line>\n    <line>3154</line>\n    <line>3350</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>365</line>\n    <line>369</line>\n    <line>831</line>\n    <line>834</line>\n    <line>941</line>\n    <line>951</line>\n    <line>2161</line>\n    <line>3378</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/ctors.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>2076</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>fgetc</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>189</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>92</line>\n    <line>3434</line>\n    <line>3630</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ctors.c</name>\n    <line>404</line>\n    <line>412</line>\n    <line>913</line>\n    <line>916</line>\n    <line>1026</line>\n    <line>1036</line>\n    <line>2405</line>\n    <line>3658</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>111</line>\n    <line>1289</line>\n    <line>1318</line>\n    <line>1422</line>\n    <line>2962</line>\n    <line>3339</line>\n    <line>3411</line>\n    <line>3718</line>\n    <line>3797</line>\n    <line>5455</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>612</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>609</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>2464</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3472</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3087</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1462</line>\n    <line>1473</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1462</line>\n    <line>1473</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1631</line>\n    <line>1637</line>\n    <line>1639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1631</line>\n    <line>1637</line>\n    <line>1639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1631</line>\n    <line>1637</line>\n    <line>1639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>2993</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1456</line>\n    <line>1467</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1456</line>\n    <line>1467</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1591</line>\n    <line>1597</line>\n    <line>1599</line>\n    <line>3066</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1591</line>\n    <line>1597</line>\n    <line>1599</line>\n    <line>3066</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1591</line>\n    <line>1597</line>\n    <line>1599</line>\n    <line>3066</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1591</line>\n    <line>1597</line>\n    <line>1599</line>\n    <line>3066</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3472</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3472</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3472</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3087</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1462</line>\n    <line>1473</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1462</line>\n    <line>1473</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1631</line>\n    <line>1637</line>\n    <line>1639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1631</line>\n    <line>1637</line>\n    <line>1639</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1631</line>\n    <line>1637</line>\n    <line>1639</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3472</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3087</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1504</line>\n    <line>1531</line>\n    <line>2553</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1657</line>\n    <line>1663</line>\n    <line>1665</line>\n    <line>3160</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3472</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/descriptor.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>3472</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1640</line>\n    <line>1873</line>\n    <line>1885</line>\n    <line>3545</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_descriptor.c</name>\n    <line>1710</line>\n    <line>1741</line>\n    <line>2895</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/shape.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_shape.c</name>\n    <line>350</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/shape.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_shape.c</name>\n    <line>350</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>93</line>\n    <line>1092</line>\n    <line>1123</line>\n    <line>1229</line>\n    <line>1493</line>\n    <line>2596</line>\n    <line>2685</line>\n    <line>3087</line>\n    <line>3155</line>\n    <line>3472</line>\n    <line>3547</line>\n    <line>4641</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>571</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>683</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>568</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1498</line>\n    <line>2088</line>\n    <line>3136</line>\n    <line>3194</line>\n    <line>3527</line>\n    <line>3587</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1498</line>\n    <line>2088</line>\n    <line>3136</line>\n    <line>3194</line>\n    <line>3527</line>\n    <line>3587</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1498</line>\n    <line>2088</line>\n    <line>3136</line>\n    <line>3194</line>\n    <line>3527</line>\n    <line>3587</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1498</line>\n    <line>2088</line>\n    <line>3136</line>\n    <line>3194</line>\n    <line>3527</line>\n    <line>3587</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1498</line>\n    <line>2088</line>\n    <line>3136</line>\n    <line>3194</line>\n    <line>3527</line>\n    <line>3587</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1498</line>\n    <line>2088</line>\n    <line>3136</line>\n    <line>3194</line>\n    <line>3527</line>\n    <line>3587</line>\n  </file>\n']",,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1697</line>\n    <line>1750</line>\n    <line>2041</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1697</line>\n    <line>1750</line>\n    <line>2041</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1697</line>\n    <line>1750</line>\n    <line>2041</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1182</line>\n    <line>1235</line>\n    <line>1536</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1182</line>\n    <line>1235</line>\n    <line>1536</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1182</line>\n    <line>1235</line>\n    <line>1536</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1595</line>\n    <line>1648</line>\n    <line>1944</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1595</line>\n    <line>1648</line>\n    <line>1944</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1595</line>\n    <line>1648</line>\n    <line>1944</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1182</line>\n    <line>1235</line>\n    <line>1536</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1182</line>\n    <line>1235</line>\n    <line>1536</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1182</line>\n    <line>1235</line>\n    <line>1536</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1677</line>\n    <line>1730</line>\n    <line>2021</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1596</line>\n    <line>1649</line>\n    <line>1945</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1155</line>\n    <line>1208</line>\n    <line>1509</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1697</line>\n    <line>1750</line>\n    <line>2041</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1697</line>\n    <line>1750</line>\n    <line>2041</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1697</line>\n    <line>1750</line>\n    <line>2041</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>92</line>\n    <line>690</line>\n    <line>2028</line>\n    <line>2081</line>\n    <line>2384</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1196</line>\n    <line>1249</line>\n    <line>1552</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1153</line>\n    <line>1206</line>\n    <line>1507</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/item_selection.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c</name>\n    <line>628</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/item_selection.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_item_selection.c</name>\n    <line>628</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/methods.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/methods.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/methods.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/methods.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/methods.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/methods.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_methods.c</name>\n    <line>1748</line>\n    <line>1798</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>948</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1060</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3523</line>\n    <line>4457</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3523</line>\n    <line>4457</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3523</line>\n    <line>4457</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3523</line>\n    <line>4457</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3523</line>\n    <line>4457</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>948</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1060</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>948</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1060</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/umath/ufunc_object.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>72</line>\n    <line>2117</line>\n    <line>3508</line>\n    <line>3525</line>\n    <line>4590</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>948</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1060</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>945</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ufunc_object.c</name>\n    <line>1097</line>\n    <line>2216</line>\n    <line>2222</line>\n    <line>2276</line>\n    <line>2282</line>\n    <line>2534</line>\n    <line>2568</line>\n    <line>2789</line>\n    <line>2890</line>\n    <line>2954</line>\n    <line>3097</line>\n    <line>3128</line>\n  </file>\n']",,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/multiarraymodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>3519</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/multiarraymodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>3519</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/multiarraymodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2618</line>\n    <line>3117</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2618</line>\n    <line>3117</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/multiarraymodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>3519</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/multiarraymodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2618</line>\n    <line>3117</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2618</line>\n    <line>3117</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>229</line>\n    <line>451</line>\n    <line>1090</line>\n    <line>1091</line>\n    <line>1092</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/multiarraymodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>2540</line>\n    <line>3046</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>3519</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_multiarraymodule.c</name>\n    <line>230</line>\n    <line>350</line>\n    <line>1243</line>\n    <line>1244</line>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/_libs/src/parser/tokenizer.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1437</line>\n    <line>1438</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1437</line>\n    <line>1438</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>32</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>374</line>\n    <line>391</line>\n    <line>488</line>\n    <line>500</line>\n    <line>516</line>\n    <line>537</line>\n    <line>600</line>\n    <line>604</line>\n    <line>750</line>\n    <line>1057</line>\n    <line>1168</line>\n    <line>1175</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>422</line>\n    <line>427</line>\n    <line>429</line>\n    <line>433</line>\n    <line>1208</line>\n    <line>1435</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strncpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string. Also, consider using strlcpy() instead, if it is avaialable to you.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>427</line>\n    <line>433</line>\n    <line>1441</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>422</line>\n    <line>427</line>\n    <line>429</line>\n    <line>433</line>\n    <line>1208</line>\n    <line>1435</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strncpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string. Also, consider using strlcpy() instead, if it is avaialable to you.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>427</line>\n    <line>433</line>\n    <line>1441</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>422</line>\n    <line>427</line>\n    <line>429</line>\n    <line>433</line>\n    <line>1208</line>\n    <line>1435</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>422</line>\n    <line>427</line>\n    <line>429</line>\n    <line>433</line>\n    <line>1208</line>\n    <line>1435</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strncpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string. Also, consider using strlcpy() instead, if it is avaialable to you.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>427</line>\n    <line>433</line>\n    <line>1441</line>\n  </file>\n']",,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1772</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1772</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1772</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1772</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1823</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1823</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1823</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1819</line>\n    <line>1820</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1819</line>\n    <line>1820</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1660</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/ujson/python/objToJSON.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>935</line>\n    <line>1528</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>935</line>\n    <line>1528</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>404</line>\n    <line>410</line>\n    <line>681</line>\n    <line>757</line>\n    <line>833</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>404</line>\n    <line>410</line>\n    <line>681</line>\n    <line>757</line>\n    <line>833</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>404</line>\n    <line>410</line>\n    <line>681</line>\n    <line>757</line>\n    <line>833</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>404</line>\n    <line>410</line>\n    <line>681</line>\n    <line>757</line>\n    <line>833</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>404</line>\n    <line>410</line>\n    <line>681</line>\n    <line>757</line>\n    <line>833</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_objToJSON.c</name>\n    <line>645</line>\n    <line>651</line>\n    <line>713</line>\n    <line>719</line>\n    <line>725</line>\n    <line>789</line>\n    <line>795</line>\n    <line>801</line>\n    <line>1012</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>511</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1450</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1287</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>511</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1450</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1287</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>511</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1450</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1287</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>550</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1722</line>\n    <line>1723</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1722</line>\n    <line>1723</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1563</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>550</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1722</line>\n    <line>1723</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1722</line>\n    <line>1723</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1563</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>415</line>\n    <line>420</line>\n    <line>1726</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>550</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1722</line>\n    <line>1723</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1722</line>\n    <line>1723</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>411</line>\n    <line>417</line>\n    <line>1372</line>\n    <line>1683</line>\n    <line>1725</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1563</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1772</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>511</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1450</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1287</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>511</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1446</line>\n    <line>1447</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1450</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1097</line>\n    <line>1407</line>\n    <line>1449</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1287</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>505</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1404</line>\n    <line>1405</line>\n  </file>\n'],"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1408</line>\n  </file>\n']","[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>52</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1057</line>\n    <line>1365</line>\n    <line>1407</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1245</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1823</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1823</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1823</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1819</line>\n    <line>1820</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1819</line>\n    <line>1820</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1780</line>\n    <line>1822</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1660</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1772</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1793</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1793</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1793</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1789</line>\n    <line>1790</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1789</line>\n    <line>1790</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1750</line>\n    <line>1792</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1750</line>\n    <line>1792</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1750</line>\n    <line>1792</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1750</line>\n    <line>1792</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1469</line>\n    <line>1750</line>\n    <line>1792</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1660</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>420</line>\n    <line>425</line>\n    <line>1905</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>573</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1901</line>\n    <line>1902</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>416</line>\n    <line>422</line>\n    <line>1581</line>\n    <line>1862</line>\n    <line>1904</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1772</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pandas,pandas/src/parser/tokenizer.c,"['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","['\n  <severity>High</severity>\n  <message>\n    Check to be sure that argument 2 passed to this function call will not\n    copy more data than can be handled, resulting in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>421</line>\n    <line>426</line>\n    <line>1975</line>\n  </file>\n']","[""\n  <severity>High</severity>\n  <type>sprintf</type>\n  <message>\n    Check to be sure that the format string passed as argument 2 to this\n    function call does not come from an untrusted source that could have added\n    formatting characters that the code is not prepared to handle.\n    Additionally, the format string could contain `%s' without precision that\n    could result in a buffer overflow.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>579</line>\n  </file>\n""]",['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1971</line>\n    <line>1972</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>55</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>strlen</type>\n  <message>\n    This function does not properly handle non-NULL terminated\nstrings.  This does not result in exploitable code, but can lead to access \nviolations.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>417</line>\n    <line>423</line>\n    <line>1651</line>\n    <line>1932</line>\n    <line>1974</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_tokenizer.c</name>\n    <line>1842</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"['\n  <severity>High</severity>\n  <type>getenv</type>\n  <message>\n    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>291</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>500</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"['\n  <severity>High</severity>\n  <type>getenv</type>\n  <message>\n    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>291</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>500</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"['\n  <severity>High</severity>\n  <type>getenv</type>\n  <message>\n    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>291</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>500</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"['\n  <severity>High</severity>\n  <type>getenv</type>\n  <message>\n    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>291</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>500</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"['\n  <severity>High</severity>\n  <type>getenv</type>\n  <message>\n    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>291</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>500</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"['\n  <severity>High</severity>\n  <type>getenv</type>\n  <message>\n    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>291</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>500</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/ProcessGroupNCCL.cpp,"['\n  <severity>High</severity>\n  <type>getenv</type>\n  <message>\n    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>291</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_ProcessGroupNCCL.cpp</name>\n    <line>500</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/cuda/python_nccl.cpp,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_python_nccl.cpp</name>\n    <line>113</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/cuda/python_nccl.cpp,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_python_nccl.cpp</name>\n    <line>111</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>53</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>268</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>53</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>267</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>53</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>140</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>239</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>239</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>239</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>191</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>239</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>239</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>249</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>239</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>239</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,aten/src/ATen/core/dispatch/Dispatcher.cpp,['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>53</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>fixed size local buffer</type>\n  <message>\n    A potential race condition vulnerability exists here.  Normally a call\n    to this function is vulnerable only when a match check precedes it.  No\n    check was detected, however one could still exist that could not be\n    detected.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_Dispatcher.cpp</name>\n    <line>140</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>191</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>191</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>249</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>241</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>249</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>191</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/csrc/jit/passes/onnx/unpack_quantized_weights.cpp,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_unpack_quantized_weights.cpp</name>\n    <line>249</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/FileStore.cpp,['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,torch/lib/c10d/FileStore.cpp,['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],['\n  <severity>Medium</severity>\n  <type>read</type>\n  <message>\n    Check buffer boundaries if calling this function in a loop \nand make sure you are not in danger of writing past the allocated space.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_FileStore.cpp</name>\n    <line>126</line>\n    <line>149</line>\n    <line>151</line>\n    <line>153</line>\n    <line>157</line>\n    <line>159</line>\n    <line>161</line>\n    <line>178</line>\n    <line>179</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,aten/src/TH/generic/THTensor.cpp,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensor.cpp</name>\n    <line>795</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensor.cpp</name>\n    <line>823</line>\n    <line>828</line>\n    <line>830</line>\n    <line>834</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensor.cpp</name>\n    <line>823</line>\n    <line>828</line>\n    <line>830</line>\n    <line>834</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensor.cpp</name>\n    <line>823</line>\n    <line>828</line>\n    <line>830</line>\n    <line>834</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>snprintf</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensor.cpp</name>\n    <line>823</line>\n    <line>828</line>\n    <line>830</line>\n    <line>834</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,aten/src/TH/generic/THTensorMath.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c</name>\n    <line>298</line>\n    <line>2941</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c</name>\n    <line>298</line>\n    <line>2941</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,pytorch,aten/src/TH/generic/THTensorMath.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c</name>\n    <line>298</line>\n    <line>2941</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_THTensorMath.c</name>\n    <line>298</line>\n    <line>2941</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>108</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/sigtoolsmodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c</name>\n    <line>1002</line>\n    <line>1138</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c</name>\n    <line>1002</line>\n    <line>1138</line>\n  </file>\n'],"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c</name>\n    <line>787</line>\n    <line>942</line>\n    <line>953</line>\n    <line>961</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c</name>\n    <line>787</line>\n    <line>942</line>\n    <line>953</line>\n    <line>961</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c</name>\n    <line>787</line>\n    <line>942</line>\n    <line>953</line>\n    <line>961</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_sigtoolsmodule.c</name>\n    <line>787</line>\n    <line>942</line>\n    <line>953</line>\n    <line>961</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c</name>\n    <line>32</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c</name>\n    <line>31</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>135</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>135</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>135</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>532</line>\n    <line>535</line>\n  </file>\n'],"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>135</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>179</line>\n    <line>786</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,Lib/io/numpyiomodule.c,"[""\n  <severity>Medium</severity>\n  <type>realloc</type>\n  <message>\n    Don't use on memory intended to be secure, because the old structure will not be zeroed out.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>120</line>\n  </file>\n""]","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_numpyiomodule.c</name>\n    <line>166</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,numpy,numpy/core/src/multiarray/mapping.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_mapping.c</name>\n    <line>1662</line>\n    <line>1719</line>\n    <line>2026</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,['\n  <severity>High</severity>\n  <type>fixed size global buffer</type>\n  <message>\n    Extra care should be taken to ensure that character arrays that are\n    allocated on the stack are used safely.  They are prime targets for\n    buffer overflow attacks.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>108</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/signal/firfilter.c,"['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']","['\n  <severity>Low</severity>\n  <type>memcpy</type>\n  <message>\n    Double check that your buffer is as big as you specify.\nWhen using functions that accept a number n of bytes to copy, such as \nstrncpy, be aware that if the dest buffer size = n it may not NULL-terminate \nthe string.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_firfilter.c</name>\n    <line>164</line>\n    <line>178</line>\n    <line>179</line>\n    <line>184</line>\n  </file>\n']",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c</name>\n    <line>32</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rats,scipy,scipy/sparse/linalg/dsolve/SuperLU/SRC/util.c,['\n  <severity>High</severity>\n  <type>fprintf</type>\n  <message>\n    Check to be sure that the non-constant format string passed as argument 2 \n    to this function call does not come from an untrusted source that could\n    have added formatting characters that the code is not prepared to handle.\n  </message>\n  <file>\n    <name>/media/nimashiri/DATA/vsprojects/ICSE23/vul_util.c</name>\n    <line>31</line>\n  </file>\n'],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
